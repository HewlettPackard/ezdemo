- name: collect ad_server info for fqdn
  hosts: ad_server
  gather_facts: yes

- name: Install and configure AD authentication
  hosts: mapr
  gather_facts: yes

  vars:
    ad_realm: "{{ ad_domain | default('SAMDOM.EXAMPLE.COM') | upper }}"
    ad_fqdn: "{{ groups['ad_server'] | map('extract', hostvars, 'ansible_fqdn') | first }}"
    # realms_value: |
    #   {
    #     kdc = {{ ad_fqdn }}:88
    #     admin_server = {{ ad_fqdn }}:749
    #   }
    # domain_realm_value: |
    #   {{ ad_realm | lower }} = {{ ad_fqdn }}
    #   .{{ ad_realm | lower }} = {{ ad_fqdn }}

  tasks:
    - name: Install ad_auth required tools for RedHat/CentOS 8
      package: 
        name: realmd,sssd,oddjob,oddjob-mkhomedir,adcli,samba-common,samba-common-tools,krb5-workstation,authselect-compat
        state: present
      when: ansible_facts['os_family'] == 'RedHat' and ansible_facts['distribution_major_version'] == '8'
      become: yes

    - name: Install ad_auth required tools for RedHat/CentOS 7
      package: 
        name: sssd,realmd,oddjob,oddjob-mkhomedir,adcli,samba-common,samba-common-tools,krb5-workstation,openldap-clients,policycoreutils-python,python3-pip
        state: present 
      when: ansible_facts['os_family'] == 'RedHat' and ansible_facts['distribution_major_version'] == '7'
      become: yes

    - name: Install ad_auth required tools for Ubuntu 2004
      package:
        name: sssd,realmd,oddjob,oddjob-mkhomedir,adcli,samba-common,krb5-user,openldap-utils,policycoreutils-python-utils,python3-pip
        state: present 
      when: ansible_facts['os_family'] == 'Debian'
      become: yes

    ### TODO: remove, used for manual setup
    - name: configure sssd
      copy: dest=/etc/sssd/sssd.conf content={{ sssd_file }} mode=0600
      become: yes
      vars:
        sssd_file: |-
          [domain/{{ ad_realm }}]
            debug_level = 3
            autofs_provider = ldap
            cache_credentials = True
            id_provider = ldap
            auth_provider = ldap
            chpass_provider = ldap
            access_provider = ldap
            ldap_uri = ldap://{{ ad_server | default(groups['ad_server'] | first) }}:389
            ldap_search_base = {{ ad_base_dn }}
            ldap_id_use_start_tls = False
            ldap_tls_cacertdir = /etc/openldap/cacerts
            ldap_tls_reqcert = never
            ldap_user_member_of = memberOf
            ldap_access_order = filter
            ldap_access_filter = (|(memberOf={{ ad_admin_group }})(memberOf={{ ad_member_group }}))
            ldap_id_mapping = False
            ldap_schema = ad
            ldap_user_gid_number = gidNumber
            ldap_group_gid_number = gidNumber
            ldap_user_object_class = posixAccount
            ldap_idmap_range_size = 200000
            ldap_user_gecos = gecos
            fallback_homedir = /home/%u
            ldap_user_home_directory = homeDirectory
            default_shell = /bin/bash
            ldap_group_object_class = posixGroup
            ldap_user_uid_number = uidNumber
            ldap_referrals = False
            ldap_idmap_range_max = 2000200000
            ldap_idmap_range_min = 200000
            ldap_group_name = cn
            ldap_user_name = cn
            ldap_default_bind_dn = {{ ad_bind_dn }}
            ldap_user_shell = loginShell
            ldap_default_authtok = {{ ad_bind_pwd }}
            ldap_user_fullname = cn

          [sssd]
            services = nss, pam, autofs
            domains = {{ ad_domain | lower }}

          [nss]

          homedir_substring = /home

          [pam]

          [sudo]

          [autofs]

          [ssh]

          [pac]

          [ifp]

          [session_recording]
      when: ansible_facts['os_family'] == 'Debian'

    - shell: pam-auth-update --enable mkhomedir
      become: yes
      when: ansible_facts['os_family'] == 'Debian'

    # - name: ensure AD can be discovered from hosts (cloud providers dont resolve to self-installed AD)
    #   lineinfile:
    #     dest: /etc/hosts
    #     line: "{{ ad_server | default(groups['ad_server'] | first) }}     {{ ad_domain }}"
    #   become: yes
    #   when: install_ad | bool

    - shell: "realm list | grep -q {{ ad_domain }}"
      register: realm_joined
      ignore_errors: yes

    - shell: |
        authselect select sssd --force
        echo "sudoers:    files sss" >> /etc/nsswitch.conf
        echo "session optional pam_oddjob_mkhomedir.so skel=/etc/skel/ umask=0022" >> /etc/pam.d/system-auth
        update-crypto-policies --set DEFAULT:AD-SUPPORT
      become: yes
      when: realm_joined is failed and (ansible_facts['os_family'] == 'RedHat' and ansible_facts['distribution_major_version'] == '8')

    - service: name=oddjobd state=restarted enabled=yes
      become: yes
      when: realm_joined is failed

    - service: name=sssd state=restarted enabled=yes
      become: yes
      when: realm_joined is failed

    - name: workaround for realm join - bypass cloud providers dns
      lineinfile:
        path: /etc/resolv.conf
        search_string: "nameserver"
        line: "nameserver {{ groups['ad_server'] | first }}"
      become: yes
      when: install_ad | bool

    - name: update krb5.conf for cloud
      community.general.ini_file:
        path: /etc/krb5.conf
        section: "{{ item.section }}"
        option: "{{ item.key }}"
        value: "{{ item.value }}"
        backup: yes
      with_items:
        - { section : libdefaults, key: 'dns_lookup_realm', value: "false" }
        - { section : libdefaults, key: 'dns_lookup_kdc', value: "false" }
        - { section : libdefaults, key: 'default_realm', value: "{{ ad_realm }}" }
        - { section : realms, key: "{{ ad_realm }}", value: "{\n kdc = {{ ad_fqdn }}:88 \n admin_server = {{ ad_fqdn }}:88 \n}" } 
        - { section : domain_realm, key: "{{ ad_realm | lower }}", value: "{{ ad_fqdn }}" }
        - { section : domain_realm, key: ".{{ ad_realm | lower }}", value: "{{ ad_fqdn }}" }
      become: yes
      when: install_ad | bool

    - name: realm discover
      shell: "realm discover {{ ad_domain }}"
      become: yes
      when: realm_joined is failed and ansible_facts['os_family'] == 'RedHat' and ansible_facts['distribution_major_version'] == '8'
      retries: 12 #Â retry for 5 minutes
      delay: 30
      register: realm
      until: realm.rc == 0

    - name: realm join
      shell: "echo {{ ad_bind_pwd }} | realm join {{ ad_domain }} ; realm permit -a"
      become: yes
      when: realm_joined is failed and ansible_facts['os_family'] == 'RedHat' and ansible_facts['distribution_major_version'] == '8'

    - name: revert the workaround for dns
      lineinfile:
        path: /etc/resolv.conf
        search_string: "nameserver"
        line: "nameserver 10.1.0.2"
      become: yes
      when: install_ad | bool
