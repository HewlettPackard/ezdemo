- name: Install and configure AD authentication
  hosts: mapr
  gather_facts: yes
  vars_prompt:

  vars: ### TODO: move the username/password to settings file
    ad_domain: "{{ ad_realm.split('.')[0] }}"
    ad_username: "Administrator"
    ad_password: "5ambaPwd@"

  tasks:
    - name: Install ad_auth required tools for RedHat/CentOS 8
      package: 
        name: realmd,sssd,oddjob,oddjob-mkhomedir,adcli,samba-common,samba-common-tools,krb5-workstation,authselect-compat
        state: present
      when: ansible_facts['os_family'] == 'RedHat' and ansible_facts['distribution_major_version'] == '8'
      become: yes

    - name: Install ad_auth required tools for RedHat/CentOS 7
      package: 
        name: sssd,realmd,oddjob,oddjob-mkhomedir,adcli,samba-common,samba-common-tools,krb5-workstation,openldap-clients,policycoreutils-python
        state: present 
      when: ansible_facts['os_family'] == 'RedHat' and ansible_facts['distribution_major_version'] == '7'
      become: yes

    - name: Install Python pip
      ignore_errors: yes
      yum:
        name: python-pip
        state: latest
      become: yes
      when: ansible_facts['os_family'] == 'RedHat' and ansible_facts['distribution_major_version'] == '7'

    - name: configure sssd
      copy: dest=/etc/sssd/sssd.conf content={{ sssd_file }} mode=0600
      become: yes
      vars:
        LDAP_BASE_DN: "CN=Users,DC=samdom,DC=example,DC=com"
        AD_ADMIN_GROUP: "DemoTenantAdmins"
        AD_MEMBER_GROUP: "DemoTenantUsers"
        LDAP_BIND_DN: "cn=Administrator,CN=Users,DC=samdom,DC=example,DC=com"
        LDAP_BIND_PASSWORD: "5ambaPwd@"
        sssd_file: |-
          [domain/{{ ad_realm | lower }}]
            debug_level = 3
            autofs_provider = ldap
            cache_credentials = True
            id_provider = ldap
            auth_provider = ldap
            chpass_provider = ldap
            access_provider = ldap
            ldap_uri = ldap://{{ groups['ad_server'] | first }}:389
            ldap_search_base = {{ LDAP_BASE_DN }}
            ldap_id_use_start_tls = False
            ldap_tls_cacertdir = /etc/openldap/cacerts
            ldap_tls_reqcert = never
            ldap_user_member_of = memberOf
            ldap_access_order = filter
            ldap_access_filter = (|(memberOf=CN={{ AD_ADMIN_GROUP }},CN=Users,DC=samdom,DC=example,DC=com)(memberOf=CN={{ AD_MEMBER_GROUP }},CN=Users,DC=samdom,DC=example,DC=com))
            ldap_id_mapping = False
            ldap_schema = ad
            ldap_user_gid_number = gidNumber
            ldap_group_gid_number = gidNumber
            ldap_user_object_class = posixAccount
            ldap_idmap_range_size = 200000
            ldap_user_gecos = gecos
            fallback_homedir = /home/%u
            ldap_user_home_directory = homeDirectory
            default_shell = /bin/bash
            ldap_group_object_class = posixGroup
            ldap_user_uid_number = uidNumber
            ldap_referrals = False
            ldap_idmap_range_max = 2000200000
            ldap_idmap_range_min = 200000
            ldap_group_name = cn
            ldap_user_name = cn
            ldap_default_bind_dn = {{ LDAP_BIND_DN }}
            ldap_user_shell = loginShell
            ldap_default_authtok = {{ LDAP_BIND_PASSWORD }}
            ldap_user_fullname = cn

          [sssd]
            services = nss, pam, autofs
            domains = {{ ad_realm | lower }}

          [nss]

          homedir_substring = /home

          [pam]

          [sudo]

          [autofs]

          [ssh]

          [pac]

          [ifp]

          [secrets]

          [session_recording]

    - shell: /usr/bin/authselect select sssd with-mkhomedir --force
      become: yes

    - service: name=oddjobd state=restarted enabled=yes
      become: yes

    - service: name=sssd state=restarted enabled=yes
      become: yes

    ### This is used since no DNS resolution for AD server/domain is available in cloud providers
    # - name: configure krb5
    #   lineinfile:
    #     path: /etc/krb5.conf
    #     regexp: "{{ item.regex }}"
    #     line: "{{ item.line }}"
    #     create: true
    #   with_items:
    #     - regex: ^#(\s.*)default_realm =
    #       line: "    default_realm = {{ ad_realm }}"
    #     - regex: ^# EXAMPLE.COM
    #       line: "{{ ad_realm }} = {"
    #     - regex: ^#     kdc = kerberos.example.com
    #       line: "     kdc = {{ groups['ad_server'] | first }}"
    #     - regex: ^#     admin_server = kerberos.example.com
    #       line: "     admin_server = {{ groups['ad_server'] | first }}"
    #     - regex: ^# .example.com = 
    #       line: ".{{ ad_realm | lower }} = {{ ad_realm }}"
    #     - regex: ^# example.com = 
    #       line: "{{ ad_realm | lower }} = {{ ad_realm }}"
    #   become: yes

    # - name: restart sssd
    #   service:
    #     name: sssd
    #     state: restarted
    #   become: yes

    # - name: Check if machine is bound
    #   shell: realm discover "{{ ad_realm }}" | grep configured
    #   register: realmd_bound

    # - name: Join system to AD and put the computer object in the Linux OU
    #   ignore_errors: yes
    #   expect:
    #     command: /bin/bash -c "/usr/sbin/realm join {{ ad_domain }} --user={{ ad_username }}"
    #     responses:
    #       Password for *: "{{ ad_password }}"
    #   when: '"configured: no" in realmd_bound.stdout'
    #   become: yes


    # - name: configure samba
    #   copy: dest=/etc/samba/smb.conf content={{ smb_file }}
    #   vars:
    #     smb_file: |-
    #       [global]
    #       security = ads
    #       workgroup = {{ ad_realm.split('.')[0] }}
    #       realm = {{ ad_realm }}
    #       kerberos method = secrets and keytab
    #       passdb backend = tdbsam
    #       unix extensions = yes
    #       client signing = yes
    #       client use spnego = yes

    #   become: yes

    # - shell: echo '5ambaPwd@' | sudo realm join {{ ad_realm }} -U Administrator
    #   register: ret
    #   failed_when: 
    #     - ret.rc == 1
    #     - '"Already joined to this domain" not in ret.stderr'

    # - service: name=oddjobd state=restarted enabled=yes
    #   become: yes 


    # - name: Add default_domain_suffix to sssd.conf
    #   lineinfile: 
    #     dest: /etc/sssd/sssd.conf
    #     line: 'default_domain_suffix = "{{ ad_domain }}"'
    #     insertafter: '^\[sssd\]'
    #   notify:
    #     - restart sssd
    #   when: '"configured: no" in realmd_bound.stdout'

    # - name: disable use_fully_qualified_names, so the user can login without adding the domain
    #   community.general.ini_file:
    #     path: /etc/sssd/sssd.conf
    #     section: 'domain/{{ ad_domain }}'
    #     option: use_fully_qualified_names
    #     value: False

    # - name: Restrict access based on specific ad group
    #   ignore_errors: yes
    #   command: /bin/bash -c "/usr/sbin/realm permit -g {{ ad_group }}"
    #   when: '"configured: no" in realmd_bound.stdout'

    # - name: Add ad group to sudoers
    #   lineinfile:
    #     dest: /etc/sudoers
    #     line: '%{{ ad_group }}       ALL=(ALL)       NOPASSWD: ALL'
    #     insertafter: '^%wheel'
    #   when: '"configured: no" in realmd_bound.stdout'

    # - name: login as user
    #   ignore_errors: yes
    #   expect:
    #     command: /bin/bash -c "ssh -o StrictHostKeyChecking=no dderichswei@demo.local@localhost"
    #     responses:
    #       (?i)password: "{{ ad_password }}"
      
    # - name: exchange public ssh key with target - user dderichswei
    #   ignore_errors: yes
    #   authorized_key:
    #     user: dderichswei@demo.local
    #     state: present
    #     manage_dir: yes
    #     key: "{{ lookup('file', '/home/dderichswei/ddlnx/ansible/dd-id_rsa.pub') }}"
