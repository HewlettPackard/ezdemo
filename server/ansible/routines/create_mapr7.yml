### Manual DF installation

- hosts: "{{ groups['mapr'] | default([]) }}"
  tasks:
  - name: Create MapR Group
    group:
      name: "mapr"
      gid: 5000
      state: present
    become: yes

  - name: Create MapR User
    user:
      name: "mapr"
      comment: "MapR default user"
      uid: "5000"
      group: "mapr"
      groups: "mapr"
      password: "{{ mapr_password }}"
      createhome: true
      update_password: on_create
      state: present
      append: true
    become: yes
    vars: # password is mapr
      mapr_password: "$6$GzlcP5ei$E6P9QM40O6KJFLZ3wMcg3jzQBNxGXrf8yc77CbCmf0KtFSxK0mpCParhc3WVNEAm4fHKPAqyRV9rsiF6DAFlW0"

  - name: get hostnames
    shell: getent hosts "{{ item }}" | awk '{ print $2 }'
    with_items: "{{ groups['mapr'] }}"
    register: hostnames

  - set_fact:
      mapr_hosts: "{{ hostnames.results | map(attribute='stdout') | list }}"

  - shell: "fdisk -l | grep '100 GiB' | cut -d' ' -f2 | tr -d ':'"
    register: mapr_disks
    become: yes 

  - name: check fresh cluster
    shell: '[ -f /opt/mapr/conf/disktab ] && grep -q "{{ mapr_disks.stdout_lines | first }}" /opt/mapr/conf/disktab'
    register: cluster_configured

  - name: install mapr packages
    package: name="{{ packages | join(',') }}" state=present
    vars:
      packages: ['mapr-librdkafka',
                  'mapr-hadoop-util',
                  'mapr-client',
                  'mapr-fileserver',
                  'mapr-s3server',
                  'mapr-mastgateway',
                  'mapr-nfs',
                  'mapr-webserver',
                  'mapr-gateway',
                  'mapr-spark',
                  'mapr-spark-historyserver',
                  'mapr-spark-thriftserver'
                  ]
    become: yes
    when: cluster_configured.failed | bool

  - name: populate /tmp/disks.txt
    lineinfile:
      dest: /tmp/disks.txt
      line: "{{ item }}"
      create: true
    with_items: "{{ mapr_disks.stdout_lines }}"
    when: cluster_configured.failed | bool

- hosts: "{{ groups['mapr'][:3] | default([]) }}"
  tasks:
  - name: install cldb and zk
    package: name="{{ item }}" state=present
    with_items: [
      'mapr-cldb',
      'mapr-zookeeper'
    ]
    become: yes
    when: cluster_configured.failed | bool

- hosts: "{{ groups['mapr'] | first | default([]) }}"
  vars:
    secure_files: 
        - filename: maprhsm.conf
          mode: '0644'
        - filename: maprkeycreds.conf
          mode: '0600'
        - filename: maprkeycreds.jceks
          mode: '0600'
        - filename: maprserverticket
          mode: '0600'
        - filename: maprtrustcreds.conf
          mode: '0644'
        - filename: maprtrustcreds.jceks
          mode: '0644'
        - filename: private.key
          mode: '0400'
        - filename: public.crt
          mode: '0444'
        - filename: ssl_keystore
          mode: '0400'
        - filename: ssl_keystore.csr
          mode: '0400'
        - filename: ssl_keystore.p12
          mode: '0400'
        - filename: ssl_keystore.pem
          mode: '0400'
        - filename: ssl_keystore-signed.pem
          mode: '0400'
        - filename: ssl_truststore
          mode: '0444'
        - filename: ssl_truststore.p12
          mode: '0444'
        - filename: ssl_truststore.pem
          mode: '0444'
        - filename: ssl_userkeystore
          mode: '0400'
        - filename: ssl_userkeystore.csr
          mode: '0400'
        - filename: ssl_userkeystore.p12
          mode: '0400'
        - filename: ssl_userkeystore.pem
          mode: '0400'
        - filename: ssl_userkeystore-signed.pem
          mode: '0400'
        - filename: ssl_usertruststore
          mode: '0444'
        - filename: ssl_usertruststore.p12
          mode: '0444'
        - filename: ssl_usertruststore.pem
          mode: '0444'
        - filename: ca/chain-ca.pem
          mode: '0644'
        - filename: tokens.tgz
          mode: '0644'

  tasks:
  # - name: Check if /opt/mapr/conf/maprkeycreds.jceks exists
  #   stat: path=/opt/mapr/conf/maprkeycreds.jceks
  #   register: cldb_key_status
  - name: Configure.sh to generate keys on first mapr-cldb node only
    shell: |-
      /opt/mapr/server/configure.sh -N dfdemo.local -Z {{ mapr_hosts[:3] | join(',') }} -C {{ mapr_hosts[:3] | join(':7222,') }}:7222 -u mapr -g mapr -genkeys -secure -dare --isvm -F /tmp/disks.txt
    # when: not cldb_key_status.stat.exists
    when: cluster_configured.failed | bool
    become: yes

  - name: pack tokens
    shell: "cd /opt/mapr/conf && tar czvf tokens.tgz tokens"
    become: yes
    when: cluster_configured.failed | bool

  - name: save keys from first node
    fetch: src="/opt/mapr/conf/{{ item.filename }}" dest="/tmp/maprkeys/" flat=yes
    with_items: "{{ secure_files }}"
    become: yes
    when: cluster_configured.failed | bool
  
- hosts: "{{ groups['mapr'][1:] | default([]) }}"
  vars:
    secure_files: 
        - filename: maprhsm.conf
          mode: '0644'
        - filename: maprkeycreds.conf
          mode: '0600'
        - filename: maprkeycreds.jceks
          mode: '0600'
        - filename: maprserverticket
          mode: '0600'
        - filename: maprtrustcreds.conf
          mode: '0644'
        - filename: maprtrustcreds.jceks
          mode: '0644'
        - filename: private.key
          mode: '0400'
        - filename: public.crt
          mode: '0444'
        - filename: ssl_keystore
          mode: '0400'
        - filename: ssl_keystore.csr
          mode: '0400'
        - filename: ssl_keystore.p12
          mode: '0400'
        - filename: ssl_keystore.pem
          mode: '0400'
        - filename: ssl_keystore-signed.pem
          mode: '0400'
        - filename: ssl_truststore
          mode: '0444'
        - filename: ssl_truststore.p12
          mode: '0444'
        - filename: ssl_truststore.pem
          mode: '0444'
        - filename: ssl_userkeystore
          mode: '0400'
        - filename: ssl_userkeystore.csr
          mode: '0400'
        - filename: ssl_userkeystore.p12
          mode: '0400'
        - filename: ssl_userkeystore.pem
          mode: '0400'
        - filename: ssl_userkeystore-signed.pem
          mode: '0400'
        - filename: ssl_usertruststore
          mode: '0444'
        - filename: ssl_usertruststore.p12
          mode: '0444'
        - filename: ssl_usertruststore.pem
          mode: '0444'
        - filename: chain-ca.pem
          mode: '0644'
        - filename: tokens.tgz
          mode: '0644'
  tasks:
  - name: Copy MapR keys to all nodes
    copy: src="/tmp/maprkeys/{{ item.filename }}" dest="/opt/mapr/conf/{{ item.filename }}" mode="{{ item.mode }}" owner="mapr" group="mapr"
    with_items: "{{ secure_files }}"
    become: yes
    when: cluster_configured.failed | bool

  - name: restore tokens for dare
    shell: "cd /opt/mapr/conf; rm -rf tokens; tar xzf tokens.tgz; mkdir ca; mv chain-ca.pem ca/"
    become: yes
    when: cluster_configured.failed | bool

  - package: name="mapr-collectd, mapr-grafana, mapr-fluentd, mapr-elasticsearch" state=present
    become: yes
    when: cluster_configured.failed | bool

  - name: install ecosystem components
    package: name="{{ packages | join(',') }}" state=present
    vars: 
      packages: [
        'mapr-kafka', 'mapr-livy', 'mapr-drill',
        'mapr-hive', 'mapr-hiveserver2', 'mapr-hivemetastore', 'mapr-hivewebhcat',
        'mapr-ksql','mapr-schema-registry', 'mapr-kafka-rest',
        'mapr-kafka-connect-jdbc',  'mapr-kafka-connect-hdfs',
        'mapr-airflow', 'mapr-airflow-webserver', 'mapr-airflow-scheduler'
      ]
    become: yes
    when: cluster_configured.failed | bool

  - name: Configure.sh secure on other nodes
    shell: "/opt/mapr/server/configure.sh -N dfdemo.local -Z {{ mapr_hosts[:3] | join(',') }} -C {{ mapr_hosts[:3] | join(':7222,') }}:7222 -OT {{ groups['mapr'] | first }} -ES {{ mapr_hosts[1:] | join(',') }} -u mapr -g mapr -secure -dare --isvm -F /tmp/disks.txt"
    when: cluster_configured.failed | bool
    become: yes

- hosts: "{{ groups['mapr'] | first | default([]) }}"
  tasks:
  - package: name="mapr-collectd, mapr-opentsdb, mapr-fluentd, mapr-kibana" state=present # metrics monitoring
    become: yes
    when: cluster_configured.failed | bool
  - name: copy the license
    copy: src="../../LatestDemoLicense-M7.txt" dest="/tmp/LatestDemoLicense-M7.txt" mode="0644" owner="root"
    ignore_errors: yes
    when: cluster_configured.failed | bool
  - name: install mapr license
    shell: |
      [ -f /tmp/LatestDemoLicense-M71.txt ] && echo mapr | maprlogin password -user mapr && maprcli license add -license /tmp/LatestDemoLicense-M7.txt -is_file true 
    when: cluster_configured.failed | bool
  - name: re-run configure.sh
    shell: /opt/mapr/server/configure.sh -R -ES {{ mapr_hosts[1:] | join(',') }}
    become: yes
  - name: configure spark
    shell: |
      echo mapr | maprlogin password -user mapr
      hadoop fs -mkdir /apps/spark
      hadoop fs -chmod 777 /apps/spark
  - name: configure delta - not final
    shell: |
      wget https://repo1.maven.org/maven2/io/delta/delta-core_2.12/1.1.0/delta-core_2.12-1.1.0.jar
      # /opt/mapr/spark/spark-3.2.0/bin/spark-shell --jars ~/delta-core_2.12-1.1.0.jar \
      #   --conf "spark.sql.extensions": io.delta.sql.DeltaSparkSessionExtension \
      #   --conf "spark.sql.catalog.spark_catalog": org.apache.spark.sql.delta.catalog.DeltaCatalog
      pip install pyspark==3.1.2
      pip install importlib-metadata
      pip install delta_spark
      # pyspark --packages io.delta:delta-core_2.12:1.1.0 --conf "spark.sql.extensions=io.delta.sql.DeltaSparkSessionExtension" --conf "spark.sql.catalog.spark_catalog=org.apache.spark.sql.delta.catalog.DeltaCatalog"
    become: yes
  - name: configure s3
    shell: |
      mkdir -p /home/mapr/.mc/certs/CAs
      ln -s /opt/mapr/conf/ca/chain-ca.pem /home/mapr/.mc/certs/CAs/chain-ca.pem || true
      chown -R mapr:mapr /home/mapr/.mc/certs/CAs
      export JAVA_HOME=$(dirname $(dirname $(readlink $(readlink $(which javac)))))
      ${JAVA_HOME}/bin/keytool -noprompt -importcert -file /opt/mapr/conf/ca/chain-ca.pem -alias maprca -storepass changeit -cacerts || true
    become: yes

- hosts: localhost
  tasks:
  - name: check tunnel
    stat: path=/tmp/MCS-socket-admin
    register: socket_file
    
  - name: MCS tunnel admin
    shell: "cd ../..; ssh -M -S /tmp/MCS-socket-admin -fNT -L 0.0.0.0:8443:{{ groups['mapr'] | first }}:8443 centos@{{ groups['gateway'] | first }}"
    when: not socket_file.stat.exists

  - name: MCS tunnel installer
    shell: "cd ../..; ssh -M -S /tmp/MCS-socket-installer -fNT -L 0.0.0.0:9443:{{ groups['mapr'] | first }}:9443 centos@{{ groups['gateway'] | first }}"
    when: not socket_file.stat.exists

  - name: MCS tunnel grafana
    shell: "cd ../..; ssh -M -S /tmp/MCS-socket-grafana -fNT -L 0.0.0.0:3000:{{ groups['mapr'] | first }}:3000 centos@{{ groups['gateway'] | first }}"
    when: not socket_file.stat.exists
