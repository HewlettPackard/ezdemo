### Manual DF installation

- hosts: "{{ groups['mapr'] | default([]) }}"
  tasks:
  - name: Create MapR Group
    group:
      name: "mapr"
      gid: 5000
      state: present
    become: yes

  - name: Create MapR User
    user:
      name: "mapr"
      comment: "MapR default user"
      uid: "5000"
      group: "mapr"
      groups: "mapr"
      password: "{{ mapr_password }}"
      createhome: true
      update_password: on_create
      state: present
      append: true
  #   groups=mapr,root,wheel  
    become: yes
    vars: # password is mapr
      mapr_password: "$6$GzlcP5ei$E6P9QM40O6KJFLZ3wMcg3jzQBNxGXrf8yc77CbCmf0KtFSxK0mpCParhc3WVNEAm4fHKPAqyRV9rsiF6DAFlW0"

  - name: get hostnames
    shell: getent hosts "{{ item }}" | awk '{ print $2 }'
    with_items: "{{ groups['mapr'] }}"
    register: hostnames

  - set_fact:
      mapr_hosts: "{{ hostnames.results | map(attribute='stdout') | list }}"

  - shell: "fdisk -l | grep '500 GiB' | cut -d' ' -f2 | tr -d ':'"
    register: mapr_disks
    become: yes 

  # RedHat / CentOS
  - name: Import RPM key
    rpm_key: state=present key="https://package.mapr.hpe.com/releases/pub/maprgpg.key"
    become: yes
  - name: Create MapR Releases Repository
    yum_repository:
      name: maprtech
      description: MapR Technologies
      file: external_repos
      baseurl: "https://package.mapr.hpe.com/releases/v7.0.0/redhat/"
      gpgcheck: true
      gpgkey: "https://package.mapr.hpe.com/releases/pub/maprgpg.key"
    become: yes
  - name: Create MapR Ecosystem Repository
    yum_repository:
      name: maprecosystem
      description: MapR Technologies
      file: external_repos
      baseurl: "https://package.mapr.hpe.com/releases/MEP/MEP-8.1.0/redhat/"
      gpgcheck: true
      gpgkey: "https://package.mapr.hpe.com/releases/pub/maprgpg.key"
    become: yes

  - name: install mapr
    package: name="{{ item }}" state=present
    with_items: ['mapr-librdkafka',
                  'mapr-hadoop-util',
                  'mapr-client',
                  'mapr-fileserver',
                  'mapr-cldb',
                  'mapr-zookeeper',
                  'mapr-mastgateway',
                  'mapr-nfs',
                  'mapr-webserver',
                  'mapr-apiserver',
                  'mapr-gateway',
                  'mapr-drill'
                  ]
    become: yes

  - name: populate /tmp/disks.txt
    lineinfile:
      dest: /tmp/disks.txt
      line: "{{ item }}"
      create: true
    with_items: "{{ mapr_disks.stdout_lines }}"

  # Configure secure cluster
  - name: Enable custom security by creating /opt/mapr/conf/.customSecure
    file: path=/opt/mapr/conf/.customSecure state=touch mode='0644'
    become: yes

- hosts: "{{ groups['mapr'] | first | default([]) }}"
  vars:
    secure_files: 
        - filename: maprhsm.conf
          mode: '0644'
        - filename: maprkeycreds.conf
          mode: '0600'
        - filename: maprkeycreds.jceks
          mode: '0600'
        - filename: maprserverticket
          mode: '0600'
        - filename: maprtrustcreds.conf
          mode: '0644'
        - filename: maprtrustcreds.jceks
          mode: '0644'
        - filename: private.key
          mode: '0400'
        - filename: public.crt
          mode: '0444'
        - filename: ssl_keystore
          mode: '0400'
        - filename: ssl_keystore.csr
          mode: '0400'
        - filename: ssl_keystore.p12
          mode: '0400'
        - filename: ssl_keystore.pem
          mode: '0400'
        - filename: ssl_keystore-signed.pem
          mode: '0400'
        - filename: ssl_truststore
          mode: '0444'
        - filename: ssl_truststore.p12
          mode: '0444'
        - filename: ssl_truststore.pem
          mode: '0444'
        - filename: ssl_userkeystore
          mode: '0400'
        - filename: ssl_userkeystore.csr
          mode: '0400'
        - filename: ssl_userkeystore.p12
          mode: '0400'
        - filename: ssl_userkeystore.pem
          mode: '0400'
        - filename: ssl_userkeystore-signed.pem
          mode: '0400'
        - filename: ssl_usertruststore
          mode: '0444'
        - filename: ssl_usertruststore.p12
          mode: '0444'
        - filename: ssl_usertruststore.pem
          mode: '0444'
        - filename: tokens.tgz
          mode: '0644'

  tasks:
  - name: Check if /opt/mapr/conf/maprkeycreds.jceks exists
    stat: path=/opt/mapr/conf/maprkeycreds.jceks
    register: cldb_key_status
  - name: Configure.sh to generate keys only run on first mapr-cldb node
    shell: |-
      /opt/mapr/server/configure.sh -N dfdemo.local -Z {{ mapr_hosts | join(',') }} -C {{ mapr_hosts | join(':7222,') }}:7222 -u mapr -g mapr -genkeys -secure -dare --isvm -F /tmp/disks.txt
    when: not cldb_key_status.stat.exists
    become: yes

  - name: pack tokens
    shell: "cd /opt/mapr/conf && tar czvf tokens.tgz tokens"
    become: yes

  - name: save keys from first node
    fetch: src="/opt/mapr/conf/{{ item.filename }}" dest="/tmp/maprkeys/" flat=yes
    with_items: "{{ secure_files }}"
    become: yes

- hosts: "{{ groups['mapr'][1:] | default([]) }}"
  vars:
    secure_files: 
        - filename: maprhsm.conf
          mode: '0644'
        - filename: maprkeycreds.conf
          mode: '0600'
        - filename: maprkeycreds.jceks
          mode: '0600'
        - filename: maprserverticket
          mode: '0600'
        - filename: maprtrustcreds.conf
          mode: '0644'
        - filename: maprtrustcreds.jceks
          mode: '0644'
        - filename: private.key
          mode: '0400'
        - filename: public.crt
          mode: '0444'
        - filename: ssl_keystore
          mode: '0400'
        - filename: ssl_keystore.csr
          mode: '0400'
        - filename: ssl_keystore.p12
          mode: '0400'
        - filename: ssl_keystore.pem
          mode: '0400'
        - filename: ssl_keystore-signed.pem
          mode: '0400'
        - filename: ssl_truststore
          mode: '0444'
        - filename: ssl_truststore.p12
          mode: '0444'
        - filename: ssl_truststore.pem
          mode: '0444'
        - filename: ssl_userkeystore
          mode: '0400'
        - filename: ssl_userkeystore.csr
          mode: '0400'
        - filename: ssl_userkeystore.p12
          mode: '0400'
        - filename: ssl_userkeystore.pem
          mode: '0400'
        - filename: ssl_userkeystore-signed.pem
          mode: '0400'
        - filename: ssl_usertruststore
          mode: '0444'
        - filename: ssl_usertruststore.p12
          mode: '0444'
        - filename: ssl_usertruststore.pem
          mode: '0444'
        - filename: tokens.tgz
          mode: '0644'
  tasks:
  - name: Copy MapR keys to all nodes
    copy: src="/tmp/maprkeys/{{ item.filename }}" dest="/opt/mapr/conf/{{ item.filename }}" mode="{{ item.mode }}" owner="mapr" group="mapr"
    with_items: "{{ secure_files }}"
    become: yes

  - name: restore tokens for dare
    shell: "cd /opt/mapr/conf; rm -rf tokens; tar xzf tokens.tgz"
    become: yes
  # run configure on other nodes
  - name: Configure.sh secure on other nodes
    shell: "/opt/mapr/server/configure.sh -N dfdemo.local -Z {{ mapr_hosts | join(',') }} -C {{ mapr_hosts | join(':7222,') }}:7222 -u mapr -g mapr -secure -dare --isvm -F /tmp/disks.txt"
    become: yes

- hosts: localhost
  tasks:
  - name: check tunnel
    stat: path=/tmp/MCS-socket-admin
    register: socket_file
    
  - name: MCS tunnel admin
    shell: "cd ../..; ssh -M -S /tmp/MCS-socket-admin -fNT -L 0.0.0.0:8443:{{ groups['mapr'] | first }}:8443 centos@{{ groups['gateway'] | first }}"
    when: not socket_file.stat.exists

  - name: MCS tunnel installer
    shell: "cd ../..; ssh -M -S /tmp/MCS-socket-installer -fNT -L 0.0.0.0:9443:{{ groups['mapr'] | first }}:9443 centos@{{ groups['gateway'] | first }}"
    when: not socket_file.stat.exists

  - name: MCS tunnel grafana
    shell: "cd ../..; ssh -M -S /tmp/MCS-socket-grafana -fNT -L 0.0.0.0:3000:{{ groups['mapr'] | first }}:3000 centos@{{ groups['gateway'] | first }}"
    when: not socket_file.stat.exists
