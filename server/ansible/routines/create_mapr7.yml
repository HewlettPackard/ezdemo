### Manual DF installation

- hosts: "{{ groups['mapr'] | default([]) }}"
  tasks:
  - name: Create MapR Group
    group:
      name: "mapr"
      gid: "5000"
      state: present
    become: yes

  - name: Create MapR User
    user:
      name: "mapr"
      comment: "MapR default user"
      uid: "5000"
      group: "mapr"
      groups: "mapr"
      password: "$6$GzlcP5ei$E6P9QM40O6KJFLZ3wMcg3jzQBNxGXrf8yc77CbCmf0KtFSxK0mpCParhc3WVNEAm4fHKPAqyRV9rsiF6DAFlW0" # password is mapr
      createhome: true
      update_password: on_create
      state: present
      append: true
    become: yes

  - name: get hostnames
    shell: getent hosts "{{ item }}" | awk '{ print $2 }'
    with_items: "{{ groups['mapr'] }}"
    register: hostnames

  - set_fact:
      mapr_hosts: "{{ hostnames.results | map(attribute='stdout') | list }}"

  - shell: "fdisk -l | grep '100 GiB' | cut -d' ' -f2 | tr -d ':'"
    register: mapr_disks
    become: yes 

  - name: populate /tmp/disks.txt
    lineinfile:
      dest: /tmp/disks.txt
      line: "{{ item }}"
      create: true
    with_items: "{{ mapr_disks.stdout_lines }}"

  - name: check installation
    # shell: '[ -f /opt/mapr/conf/disktab ] && grep -q "{{ mapr_disks.stdout_lines | first }}" /opt/mapr/conf/disktab'
    shell: '[ -f /opt/mapr/roles/fileserver ]'
    register: cluster_configured
    ignore_errors: yes

### ALL NODES
  - name: install mapr packages
    package: name="{{ packages | join(',') }}" state=present
    vars:
      packages: ['mapr-librdkafka',
                  'mapr-hadoop-util',
                  'mapr-client',
                  'mapr-fileserver',
                  'mapr-s3server',
                  'mapr-mastgateway',
                  'mapr-nfs',
                  'mapr-webserver',
                  'mapr-gateway',
                  'mapr-collectd', 'mapr-fluentd'] ## monitoring
    become: yes

- hosts: "{{ groups['mapr'][:3] | default([]) }}"
  tasks:
  - name: install cldb and zk
    package: name="mapr-cldb, mapr-zookeeper" state=present
    become: yes

### FIRST NODE
- hosts: "{{ groups['mapr'] | first | default([]) }}"
  vars:
    secure_files: 
        - filename: maprhsm.conf
          mode: '0644'
        - filename: maprkeycreds.conf
          mode: '0600'
        - filename: maprkeycreds.jceks
          mode: '0600'
        - filename: maprserverticket
          mode: '0600'
        - filename: maprtrustcreds.conf
          mode: '0644'
        - filename: maprtrustcreds.jceks
          mode: '0644'
        - filename: private.key
          mode: '0400'
        - filename: public.crt
          mode: '0444'
        - filename: ssl_keystore
          mode: '0400'
        - filename: ssl_keystore.csr
          mode: '0400'
        - filename: ssl_keystore.p12
          mode: '0400'
        - filename: ssl_keystore.pem
          mode: '0400'
        - filename: ssl_keystore-signed.pem
          mode: '0400'
        - filename: ssl_truststore
          mode: '0444'
        - filename: ssl_truststore.p12
          mode: '0444'
        - filename: ssl_truststore.pem
          mode: '0444'
        - filename: ssl_userkeystore
          mode: '0400'
        - filename: ssl_userkeystore.csr
          mode: '0400'
        - filename: ssl_userkeystore.p12
          mode: '0400'
        - filename: ssl_userkeystore.pem
          mode: '0400'
        - filename: ssl_userkeystore-signed.pem
          mode: '0400'
        - filename: ssl_usertruststore
          mode: '0444'
        - filename: ssl_usertruststore.p12
          mode: '0444'
        - filename: ssl_usertruststore.pem
          mode: '0444'
        - filename: ca/chain-ca.pem
          mode: '0644'
        - filename: ca/signing-ca.pem
          mode: '0644'
        - filename: ca/root-ca.pem
          mode: '0644'
        - filename: tokens.tgz
          mode: '0644'

  tasks:
  - name: Configure.sh to generate keys on first mapr-cldb node only
    shell: |-
      /opt/mapr/server/configure.sh -N dfdemo.local -Z {{ mapr_hosts[:3] | join(',') }} -C {{ mapr_hosts[:3] | join(':7222,') }}:7222 -u mapr -g mapr -genkeys -secure -dare --isvm -F /tmp/disks.txt
    when: cluster_configured.failed | bool
    become: yes

  - name: pack tokens
    shell: "cd /opt/mapr/conf && tar czvf tokens.tgz tokens"
    become: yes

  - name: save keys from first node
    fetch: src="/opt/mapr/conf/{{ item.filename }}" dest="/tmp/maprkeys/" flat=yes
    with_items: "{{ secure_files }}"
    become: yes

#### OTHER NODES
- hosts: "{{ groups['mapr'][1:] | default([]) }}"
  vars:
    secure_files: 
        - filename: maprhsm.conf
          mode: '0644'
        - filename: maprkeycreds.conf
          mode: '0600'
        - filename: maprkeycreds.jceks
          mode: '0600'
        - filename: maprserverticket
          mode: '0600'
        - filename: maprtrustcreds.conf
          mode: '0644'
        - filename: maprtrustcreds.jceks
          mode: '0644'
        - filename: private.key
          mode: '0400'
        - filename: public.crt
          mode: '0444'
        - filename: ssl_keystore
          mode: '0400'
        - filename: ssl_keystore.csr
          mode: '0400'
        - filename: ssl_keystore.p12
          mode: '0400'
        - filename: ssl_keystore.pem
          mode: '0400'
        - filename: ssl_keystore-signed.pem
          mode: '0400'
        - filename: ssl_truststore
          mode: '0444'
        - filename: ssl_truststore.p12
          mode: '0444'
        - filename: ssl_truststore.pem
          mode: '0444'
        - filename: ssl_userkeystore
          mode: '0400'
        - filename: ssl_userkeystore.csr
          mode: '0400'
        - filename: ssl_userkeystore.p12
          mode: '0400'
        - filename: ssl_userkeystore.pem
          mode: '0400'
        - filename: ssl_userkeystore-signed.pem
          mode: '0400'
        - filename: ssl_usertruststore
          mode: '0444'
        - filename: ssl_usertruststore.p12
          mode: '0444'
        - filename: ssl_usertruststore.pem
          mode: '0444'
        - filename: chain-ca.pem
          mode: '0644'
        - filename: signing-ca.pem
          mode: '0644'
        - filename: root-ca.pem
          mode: '0644'
        - filename: tokens.tgz
          mode: '0644'
  tasks:
  - name: Copy MapR keys to all nodes
    copy: src="/tmp/maprkeys/{{ item.filename }}" dest="/opt/mapr/conf/{{ item.filename }}" mode="{{ item.mode }}" owner="mapr" group="mapr"
    with_items: "{{ secure_files }}"
    become: yes

  - name: restore tokens for dare
    shell: "cd /opt/mapr/conf; rm -rf tokens && tar xzf tokens.tgz; rm -rf ca && mkdir ca; mv chain-ca.pem signing-ca.pem root-ca.pem ca/"
    become: yes

  - name: install ecosystem components
    package: name="{{ packages | join(',') }}" state=present
    vars: 
      packages: [
        mapr-kafka, mapr-livy, mapr-drill, mapr-spark, mapr-spark-historyserver,
        mapr-hive, mapr-hiveserver2, mapr-hivewebhcat,
        mapr-ksql,mapr-schema-registry, mapr-kafka-rest,
        mapr-kafka-connect-jdbc,  mapr-kafka-connect-hdfs, mapr-elasticsearch
      ]
    become: yes

  - name: Configure.sh secure on other nodes
    shell: "/opt/mapr/server/configure.sh -N dfdemo.local -Z {{ mapr_hosts[:3] | join(',') }} -C {{ mapr_hosts[:3] | join(':7222,') }}:7222 -OT {{ groups['mapr'] | first }} -ES {{ mapr_hosts[1:] | join(',') }} -u mapr -g mapr -secure -dare --isvm -F /tmp/disks.txt"
    become: yes

### FIRST NODE
- hosts: "{{ groups['mapr'] | first | default([]) }}"
  tasks:
  - name: Enable monitoring & standalone services
    package: name="mapr-airflow-webserver, mapr-airflow-scheduler, mapr-opentsdb, mapr-grafana, mapr-kibana, mapr-hivemetastore, mapr-spark-thriftserver" state=present
    become: yes

  - name: install ecosystem components on first node (if single node)
    package: name="{{ packages | join(',') }}" state=present
    vars: 
      packages: [
        mapr-kafka, mapr-livy, mapr-drill, mapr-spark, mapr-spark-historyserver,
        mapr-hive, mapr-hiveserver2, mapr-hivewebhcat,
        mapr-ksql,mapr-schema-registry, mapr-kafka-rest,
        mapr-kafka-connect-jdbc,  mapr-kafka-connect-hdfs, mapr-elasticsearch
      ]
    become: yes
    when: not is_mapr_ha | bool

  - name: re-Configure.sh
    shell: "/opt/mapr/server/configure.sh -R -OT {{ groups['mapr'] | first }} -ES {{ mapr_hosts[1:] | join(',') }}"
    become: yes

  - name: create ticket for user
    shell: echo mapr | maprlogin password -user mapr

  - name: copy the license
    copy: src="../../LatestDemoLicense-M7.txt" dest="/tmp/LatestDemoLicense-M7.txt" mode="0644"
    ignore_errors: yes

  - name: install mapr license
    shell: |
      [ -f /tmp/LatestDemoLicense-M7.txt ] && maprcli license add -license /tmp/LatestDemoLicense-M7.txt -is_file true 
    ignore_errors: yes

- hosts: localhost
  tasks:
  - name: check socket file
    stat: path=/tmp/MCS-socket-admin
    register: socket_file
    
  - name: MCS tunnel for ports
    shell: "cd ../..; ssh -M -S /tmp/MCS-socket-{{ item.description }} -fNT -L 0.0.0.0:{{ item.port }}:{{ groups['mapr'] | first }}:{{ item.port }} centos@{{ groups['gateway'] | first }}"
    when: not socket_file.stat.exists
    with_items:
      - port: 8443
        description: admin
      - port: 9443
        description: installer
      - port: 8780
        description: airflow
      - port: 5601
        description: kibana
