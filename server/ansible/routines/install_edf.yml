### Using installer on first node
- hosts: mapr
  gather_facts: yes ##Â To collect all mapr nodes' fqdn

- hosts: "{{ (groups['mapr'] | first) | default([]) }}"
  tasks:
  - name: set repo params
    set_fact:
      mapr_repo: "{{ 'https://package.mapr.hpe.com/releases' if not mapr_repo is defined else mapr_repo }}"

  - name: get mapr installer
    get_url:
      url: "{{ mapr_repo}}/installer/mapr-setup.sh"
      dest: /tmp/mapr-setup.sh
      mode: '0755'

  - stat: path=/opt/mapr/installer/bin/mapr-installer-cli
    register: installer

  - name: setup mapr installer
    command: /tmp/mapr-setup.sh -y -r "{{ mapr_repo }}"
    become: yes
    when: not installer.stat.exists

  - shell: "fdisk -l | grep '100 GiB' | cut -d' ' -f2 | tr -d ':'"
    register: mapr_disks
    become: yes

  - name: get node names
    set_fact:
      mapr_hosts: "{{ groups['mapr'] | map ('extract', hostvars, 'ansible_fqdn') }}"

  - name: update stanza
    copy:
      dest: /tmp/mapr.stanza
      content: |
        environment:
          mapr_core_version: 7.0.0
        config:
          admin_id: mapr
          cluster_admin_create: true
          cluster_admin_password: "{{ admin_password }}"
          cluster_name: "{{ project_id | regex_replace('[ _]', '') }}.datafabric.io"
          db_admin_password_set: true
          db_admin_password: {{ admin_password }}
          db_admin_user: root
          debug_set: false
          disk_format: true
          disk_stripe: 1
          disks:
          - /dev/xvdb
          elasticsearch_path: /opt/mapr/es_db
          enable_encryption_at_rest: true
          enable_min_metrics_collection: true
          enable_nfs: true
          hosts:
            {{ mapr_hosts | to_nice_yaml | indent(4) }}
          license_type: M7
          log_admin_password: {{ admin_password }}
          mep_version: 8.1.0
          metrics_ui_admin_password: {{ admin_password }}
          nfs_type: "NFSv3"
          security: true
          ssh_id: {{ ansible_user_id }}
          ssh_key_file: "{{ ansible_user_dir }}/controller.prv_key"
          disks:
            {{ mapr_disks.stdout_lines | to_nice_yaml | indent(4) }}
          disk_stripe: 1
          services:
            template-05-converged:
            mapr-airflow:
              enabled: true
            mapr-airflow-client:
              enabled: true
            mapr-airflow-scheduler:
              enabled: true
            mapr-airflow-webserver:
              enabled: true
            mapr-hivemetastore:
              database:
                create: true
                name: hive
                user: hive
                password: {{ admin_password }}
            mapr-hue-livy:
                  enabled: true
            mapr-grafana:
              enabled: {{ mapr_monitoring is defined and mapr_monitoring | bool }}
            mapr-opentsdb:
              enabled: {{ mapr_monitoring is defined and mapr_monitoring | bool }}
            mapr-collectd:
            # mapr-fluentd:
            mapr-kibana:
              enabled: {{ mapr_monitoring is defined and mapr_monitoring | bool }}
            mapr-elasticsearch:
              enabled: {{ mapr_monitoring is defined and mapr_monitoring | bool }}
            mapr-data-access-gateway:
            mapr-mastgateway:

    register: stanza

  - name: copy ssh key file
    copy:
      src: ../../generated/controller.prv_key
      dest: "{{ ansible_user_dir }}/controller.prv_key"
      mode: "0600"

  - name: install from stanza
    shell: "echo y | sudo /opt/mapr/installer/bin/mapr-installer-cli install -nv -t /tmp/mapr.stanza"
    when: stanza.changed

  - name: copy the license
    copy: src="../../LatestDemoLicense-M7.txt" dest="/tmp/LatestDemoLicense-M7.txt" mode="0644"
    ignore_errors: yes

  # - name: add license 
  #   shell: "/opt/mapr/installer/bin/mapr-installer-cli license -n -l /tmp/LatestDemoLicense-M7.txt -o config.ssh_id={{ ansible_user_id }} -o config.ssh_key_file={{ ansible_user_dir }}/controller.prv_key"
  #   ignore_errors: yes
  #   become: yes

  - name: create ticket for user
    shell: "echo {{ admin_password }} | maprlogin password -user mapr"

  - name: install mapr license
    shell: |
      [ -f /tmp/LatestDemoLicense-M7.txt ] && maprcli license add -license /tmp/LatestDemoLicense-M7.txt -is_file true 
    ignore_errors: yes

##### TODO: Query the service information, get which service is running on which node and setup forwarding accordingly
#####
# - hosts: localhost
#   gather_facts: no
#   tasks:
#   - name: check socket file
#     stat: path=/tmp/MCS-socket-admin
#     register: socket_file

#   - name: MCS tunnel for ports
#     shell: "cd ../..; ssh -M -S /tmp/MCS-socket-{{ item.description }} -fNT -L 0.0.0.0:{{ item.port }}:{{ groups['mapr'] | first }}:{{ item.port }} centos@{{ groups['gateway'] | first }}"
#     when: not socket_file.stat.exists and groups['gateway'] | length > 0
#     with_items:
#       - port: 8443
#         description: admin
#       - port: 9443
#         description: installer
#       - port: 8780
#         description: airflow
#       - port: 5601
#         description: kibana
#       - port: 8047
#         description: drill
#       - port: 8243
#         description: dag
