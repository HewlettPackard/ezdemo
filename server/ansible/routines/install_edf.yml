### Using installer on first node
- hosts: mapr
  gather_facts: yes ## To collect all mapr nodes' fqdn

- hosts: "{{ (groups['mapr'] | first) | default([]) }}"
  tasks:
  - name: set repo params
    set_fact:
      mapr_repo: "{{ 'https://package.mapr.hpe.com/releases' if not mapr_repo is defined else mapr_repo }}"

  - name: get mapr installer
    get_url:
      url: "{{ mapr_repo}}/installer/mapr-setup.sh"
      dest: /tmp/mapr-setup.sh
      mode: '0755'

  - stat: path=/opt/mapr/installer/bin/mapr-installer-cli
    register: installer

  - name: setup mapr installer
    command: /tmp/mapr-setup.sh -y -r "{{ mapr_repo }}"
    become: yes
    when: not installer.stat.exists

  - shell: "fdisk -l | grep '100 GiB' | cut -d' ' -f2 | tr -d ':'"
    register: mapr_disks
    become: yes

  - name: get node names
    set_fact:
      mapr_hosts: "{{ groups['mapr'] | map ('extract', hostvars, 'ansible_fqdn') }}"

  - set_fact:
      stanza_file: |
        environment:
          mapr_core_version: 7.0.0
        config:
          admin_id: mapr
          cluster_name: "{{ project_id | regex_replace('[ _]', '') | lower }}.datafabric.io"
          db_admin_password_set: true
          db_admin_password: {{ admin_password }}
          db_admin_user: root
          debug_set: false
          elasticsearch_path: /opt/mapr/es_db
          enable_encryption_at_rest: true
          enable_min_metrics_collection: true
          enable_nfs: true
          hosts:
            {{ mapr_hosts[:3] | to_nice_yaml | indent(4) }}
          license_type: M7
          log_admin_password: {{ admin_password }}
          mep_version: 8.1.0
          metrics_ui_admin_password: {{ admin_password }}
          nfs_type: "NFSv4"
          security: true
          ssh_id: {{ ansible_user_id }}
          ssh_key_file: "{{ ansible_user_dir }}/controller.prv_key"
          disks:
            {{ mapr_disks.stdout_lines | to_nice_yaml | indent(4) }}
          disk_format: true
          disk_stripe: 1
          services:
            template-05-converged:
            mapr-hivemetastore:
              database:
                create: true
                name: hive
                user: hive
                password: {{ admin_password }}
            mapr-hue-livy:
                  enabled: true
            mapr-grafana:
              enabled: {{ mapr_monitoring is defined and mapr_monitoring | bool }}
            mapr-opentsdb:
              enabled: {{ mapr_monitoring is defined and mapr_monitoring | bool }}
            mapr-collectd:
            mapr-fluentd:
            mapr-kibana:
              enabled: {{ mapr_monitoring is defined and mapr_monitoring | bool }}
            mapr-elasticsearch:
              enabled: {{ mapr_monitoring is defined and mapr_monitoring | bool }}
            mapr-data-access-gateway:
            mapr-mastgateway:

  #### TODO: install only 3 nodes as workaround - non-CLDB nodes failing to configure disks in secure cluster (race condition)
  - name: stanza for first 3 nodes
    copy:
      dest: /tmp/mapr.stanza
      content: "{{ stanza_file }}"
    register: stanza

  - name: copy ssh key file
    copy:
      src: ../../generated/controller.prv_key
      dest: "{{ ansible_user_dir }}/controller.prv_key"
      mode: "0600"

  - name: install from stanza
    shell: "echo y | sudo /opt/mapr/installer/bin/mapr-installer-cli install -nv -t /tmp/mapr.stanza"
    when: stanza.changed
    register: first_install
    failed_when: 
      - first_install.rc != 0
      - "'Install is not required' not in first_install.stderr"

  - name: copy the license
    copy: src="../../LatestDemoLicense-M7.txt" dest="/tmp/LatestDemoLicense-M7.txt" mode="0644"
    ignore_errors: yes

  # - name: add license 
  #   shell: "/opt/mapr/installer/bin/mapr-installer-cli license -n -l /tmp/LatestDemoLicense-M7.txt -o config.ssh_id={{ ansible_user_id }} -o config.ssh_key_file={{ ansible_user_dir }}/controller.prv_key"
  #   ignore_errors: yes
  #   become: yes

  - name: wait for DF services to come up
    wait_for:
      timeout: 300
    delegate_to: localhost

  - name: create ticket for user # installer default password for cluster admin (mapr) user is mapr
    shell: '[ -f /tmp/maprticket_1000 ] || (echo mapr | maprlogin password -user mapr)'

  - name: create ticket for root # installer default password for cluster admin (mapr) user is mapr
    shell: '[ -f /tmp/maprticket_0 ] || (echo mapr | sudo maprlogin password -user mapr)'

  - name: install mapr license
    shell: |
      [ -f /tmp/LatestDemoLicense-M7.txt ] && maprcli license add -license /tmp/LatestDemoLicense-M7.txt -is_file true 
    ignore_errors: yes
    register: licensed
    failed_when: 
      - licensed.rc != 0
      - "'license exists' not in licensed.stdout"

  - name: update stanza for remaining nodes
    copy:
      dest: /tmp/mapr.stanza
      content: "{{ stanza_yaml | combine( (new_nodes | from_yaml), recursive=True) | to_nice_yaml() }}"
    when: mapr_hosts | length > 3
    vars:
      stanza_yaml: "{{ stanza_file | from_yaml }}"
      new_nodes: |
        config:
          scaled_hosts2:
            {{ mapr_hosts[3:] | to_nice_yaml | indent(4) }}

  # TODO: More debug needed, this is hanging forever
  - name: add remaining nodes
    shell: "echo y | sudo /opt/mapr/installer/bin/mapr-installer-cli install -nv -t /tmp/mapr.stanza"
    when: mapr_hosts | length > 3
