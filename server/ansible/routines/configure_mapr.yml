### Configure Picasso
- hosts: "{{ groups['controllers'] | first }}"
  # gather_facts: false
  environment:
    PATH: "{{ ansible_env.PATH }}:~/.local/bin/"
  tasks:
    - name: read cluster id
      shell: "hpecp k8scluster list -o text | cut -d' ' -f1"
      register: cluster_id

    - name: get cluster
      shell: "hpecp k8scluster get {{ cluster_id.stdout }} -o json"
      register: cluster_json
      ignore_errors: True
    - set_fact:
        cluster: "{{ cluster_json.stdout | from_json }}"      
    - set_fact:
        masters: "{{ cluster | json_query(jmesquery) }}"
      vars:
        jmesquery: "k8shosts_config[?role=='master'].node"

    - name: get first master
      shell: "hpecp k8sworker get {{ masters | first }} -o json"
      register: master_json
    - set_fact:
        master: "{{ master_json.stdout | from_json }}"
    
    - name: find ecp directory
      find:
        paths: /opt/bluedata/bundles
        patterns: 'hpe-cp*'
        file_type: directory
      register: output_directory

    - name: set manifest
      copy:
        dest: /opt/bluedata/tmp/ext-bm-mapr/ext-dftenant-manifest
        content: "{{ manifest }}"
        force: True
        vars: 
          manifest: |-
            CLDB_LIST="{{ groups['mapr'] | join(',') }}"
            # CLDB_PORT="7222"
            SECURE="true"
            CLUSTER_NAME="{{ ad_realm }}"
            # REST_URL="<REST_API_URL_as_hostname:port>"
            # EXT_MAPR_MOUNT_DIR="<directory_in_mount_path_for_volumes>"
            # TICKET_FILE_LOCATION="<path_to_ticket_for_ECP_admin>"
            # SSL_TRUSTSTORE_LOCATION="<path_to_ssl_truststore>"
            # EXT_SECRETS_FILE_LOCATION="<path_to_external_secrets_file_for_Spark_cluster>"
            # FORCE_ERASE="<true_or_false" (Default is true)
            # RESTART_CNODE="<true_or_false"> (Default is true)

    # - name: prepare tenants
    #   shell: |-
    #     export MASTER_NODE_IP={{ master.ipaddr }}
    #     export LOG_FILE_PATH=/tmp/register_k8s_prepare.log
    #     {{ item.path }}/startscript.sh --action prepare_dftenants
    #   with_items: "{{ output_directory.files }}"
    #   register: output

    # - name: configure tenants
    #   shell: |-
    #     export MASTER_NODE_IP={{ firstmasterip }}
    #     export LOG_FILE_PATH=/tmp/register_k8s_configure.log
    #     echo yes | {{ item.path }}/startscript.sh --action configure_dftenants
    #   with_items: "{{ output_directory.files }}"
    #   register: output

    # - name: register tenants
    #   shell: |-
    #     export MASTER_NODE_IP={{ firstmasterip }}
    #     export LOG_FILE_PATH=/tmp/register_k8s_register.log
    #     expect <<EOF
    #       set timeout 1800
    #       spawn {{ item.path }}/startscript.sh --action register_dftenants
    #       expect ".*Enter Site Admin username: " { send "admin\r" }
    #       expect "admin\r\nEnter Site Admin password: " { send "{{ admin_password }}\r" }
    #       expect eof
    #     EOF
    #   register: output
    #   with_items: "{{ output_directory.files }}"
    #   ignore_errors: True
