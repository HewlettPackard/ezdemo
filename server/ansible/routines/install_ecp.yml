#######################################################################################################
# HPECP Installation
# created by Dirk Derichsweiler, do not hesitate to contact me. k8s@hpe.com
# modified by Erdinc Kaya
# Tested with HPECP 5.3
#######################################################################################################

### Configure AD Server
- hosts: "{{ groups['ad_server'] | first }}"
  tasks:
  - name: copy ldif file
    copy:
      src: "../../files/ad_set_posix_classes.ldif"
      dest: "/home/centos/ad_set_posix_classes.ldif"
      owner: "centos"
      group: "centos"
      mode: 0644

  - name: copy user setup script
    copy:
      src: "../../files/ad_user_setup.sh"
      dest: "/home/centos/ad_user_setup.sh"
      owner: "centos"
      group: "centos"
      mode: 0755

  - name: copy ldif script
    copy:
      src: "../../files/ldif_modify.sh"
      dest: "/home/centos/ldif_modify.sh"
      owner: "centos"
      group: "centos"
      mode: 0755

  - name: copy ad run script
    copy:
      src: "../../files/run_ad.sh"
      dest: "/home/centos/run_ad.sh"
      owner: "centos"
      group: "centos"
      mode: 0755

  - name: run samba
    shell: "/home/centos/run_ad.sh && sleep 120 && /home/centos/ldif_modify.sh"
    async: 600 ## wait for 10 minutes before time out
    poll: 0 ## don't wait it to finish
    register: samba_run

  # ### Collect hostnames for CA Certificate
  # - name: get hostnames
  #   shell: getent hosts "{{ item }}" | awk '{ print $2 }'
  #   with_items: "{{ groups['controllers'] + groups['gateway'] }}"
  #   register: hostnames

  # - name: get hostlist
  #   set_fact:
  #     all_hosts: "{{ hostnames.results | map(attribute='stdout') | list }}"

- hosts: "{{ (groups['controllers'] | first) | default([]) }}"
  gather_facts: yes
  # vars:
    # gateway_ips : "{{ groups['gateway'] | list }}"

  tasks:  
  - name: configure hpecp
    copy:
      dest: ~/.hpecp.conf
      content: |-
        [default]
        api_host = {{ groups['controllers'] | first }}
        api_port = 8080
        use_ssl = True
        verify_ssl = False
        warn_ssl = False
        username = admin
        password = {{ admin_password }}
      force: yes

  - name: copy private key
    copy:
      src: "../../generated/controller.prv_key"
      dest: "/home/centos/controller.prv_key"
      owner: "centos"
      group: "centos"
      mode: 0600

  - name: check if ecp is installed
    stat:
      path: "/opt/bluedata"
    register: hpecp_installed

  - name: check ecp install file
    stat:
      path: "/home/centos/{{ install_file }}"
    register: installation_file

  - name: download ecp install file
    get_url:
      url: "{{ download_url }}"
      dest: "/home/centos/{{ install_file }}"
      mode: '0755'
    when: not installation_file.stat.exists
    
  - stat: path=/home/centos/minica.pem
    register: cert_file
  - name: copy certificate
    copy:
      src: "../../generated/{{ gateway_pub_dns }}/cert.pem"
      dest: "/home/centos/minica.pem"
      owner: "centos"
      group: "centos"
      mode: 0644
    when: not cert_file.stat.exists

  - name: copy certificate key
    copy:
      src: "../../generated/{{ gateway_pub_dns }}/key.pem"
      dest: "/home/centos/minica-key.pem"
      owner: "centos"
      group: "centos"
      mode: 0600
    when: not cert_file.stat.exists
  
  - name: copy minica certificate
    copy:
      src: "../../generated/{{ gateway_pub_dns }}/cert.pem"
      dest: "/home/centos/cert.pem"
      owner: "centos"
      group: "centos"
      mode: 0600
    when: not cert_file.stat.exists
  
  - name: copy minica certificate key
    copy:
      src: "../../generated/{{ gateway_pub_dns }}/key.pem"
      dest: "/home/centos/key.pem"
      owner: "centos"
      group: "centos"
      mode: 0600
    when: not cert_file.stat.exists
  
  - name: install ecp
    shell: "/home/centos/{{ install_file }} --skipeula --default-password {{ admin_password }} --ssl-cert /home/centos/cert.pem --ssl-priv-key /home/centos/key.pem"
    when: not hpecp_installed.stat.exists
    # become: yes

  - name: configure ecp
    shell: /opt/bluedata/common-install/scripts/start_install.py -c "{{ item }}" -p "{{ admin_password }}" -t 60 -s docker -d hpecplocal --cin ecp-demo -k no --no-local-tenant-storage --routable no
    when: not hpecp_installed.stat.exists
    with_items: "{{ groups['controllers'] }}"

  - name: install python3
    package:
      name: 
        - python3
        - python3-pip
        - expect
      state: latest
    become: yes

  - name: install hpecp client
    shell: pip3 install --user hpecp pexpect

  - name: system-wide hpecp
    file: 
      src: "/home/centos/.local/bin/hpecp"
      dest: "/usr/local/bin/hpecp"
      owner: root
      group: root
      state: link
      mode: 0755
    become: yes

  - name: check ecp gateway
    shell: ~/.local/bin/hpecp gateway list --output text
    register: gw_result

  - name: site lockdown
    shell: ~/.local/bin/hpecp lock create "Install Gateway"
    when: gw_result.stdout == ""

  - name: install ecp gateway
    shell: ~/.local/bin/hpecp gateway create-with-ssh-key --ip "{{ item }}" --proxy-node-hostname "{{ gateway_pub_dns }}" --ssh-key-file ./controller.prv_key
    with_items: "{{ groups['gateway'] | list }}"
    when: gw_result.stdout == ""
  
  - name: exit site lockdown
    shell: ~/.local/bin/hpecp lock delete-all --timeout-secs 1800
    when: gw_result.stdout == ""

  - name: AD config
    copy:
      dest: ~/adconf.json
      content: |-
        { 
          "external_identity_server":  {
            "bind_pwd":"5ambaPwd@",
            "user_attribute":"sAMAccountName",
            "bind_type":"search_bind",
            "bind_dn":"cn=Administrator,CN=Users,DC=samdom,DC=example,DC=com",
            "host":"{{ groups['ad_server'] | list | first }}",
            "security_protocol":"ldaps",
            "base_dn":"CN=Users,DC=samdom,DC=example,DC=com",
            "verify_peer": false,
            "type":"Active Directory",
            "port":636 
          }
        }
      force: yes

  # - name: Check the AD server
  #   async_status:
  #     jid: "{{ hostvars[groups['ad_server'] | first]['samba_run'].ansible_job_id }}"
  #   register: job_result
  #   until: job_result.finished
  #   retries: 100
  #   delay: 10

  - name: configure global AD
    shell: ~/.local/bin/hpecp httpclient post /api/v2/config/auth --json-file ~/adconf.json
    register: result
    retries: 5
    delay: 60
    until: result is not failed
    