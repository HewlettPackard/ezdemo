---
######################################################################################################
# VMWARE DEPLOYMENT 
######################################################################################################

#######################
# Controller Deployment
#######################

- hosts: localhost
  vars:
    controller_ips: "{{ groups['controller'] | default([])  }}"
    gateway_ips: "{{ groups['gateway'] | default([])  }}"
    picasso_ips: "{{ groups['picasso'] | default([])  }}"
    k8s_ips: "{{ groups['k8s'] | default([])  }}"
    mapr_ips: "{{ groups['mapr'] | default([]) }}"
    ad_server_ips: "{{ groups['ad_server'] if install_ad | bool else ad_server }}"

  gather_facts: no
  tasks:

  - name: Create a VM folder on given datacenter
    community.vmware.vcenter_folder:
      hostname: "{{ vcenter_server }}"
      username: "{{ vcenter_user }}"
      password: "{{ vcenter_password }}"
      validate_certs: no
      datacenter_name: "{{ datacenter_name }}"
      folder_name: "{{vcenter_folder}}"
      folder_type: vm
      state: present
    register: vm_folder_creation_result
    delegate_to: localhost

  - name: Clone template {{ template_name }} to the Controller
    vmware_guest:
      hostname: "{{ vcenter_server }}"
      username: "{{ vcenter_user }}"
      password: "{{ vcenter_password }}"
      validate_certs: no
      name: "{{ item }}-ECP-CONTROLLER-{{ vm_prefix }}{{ item.split('.')[-1][-3:] }}"
      template: "{{ template_name }}"
      datacenter: "{{ datacenter_name }}"
      folder: "{{vcenter_folder}}"
      cluster: "{{ cluster_name }}"
      datastore: "{{ vcenter_datastore }}"
      hardware:
        memory_mb: "{{ vm_controller_memory }}"
        num_cpus: "{{ vm_controller_cpu_cores }}"
      networks:
      - name: "{{ vcenter_vswitch }}"
        ip: "{{ item }}"
        netmask: "{{ vm_network | ansible.utils.ipaddr('netmask') }}"
        gateway: "{{ vm_gateway }}"
        type: static
        dns_servers: "{{ vm_dns }}"
      disk:
        - autoselect_datastore: no
          datastore: "{{ vcenter_datastore }}"
          size_gb: 400
          type: thin
        - autoselect_datastore: no
          datastore: "{{ vcenter_datastore }}"
          size_gb: "{{ vm_controller_disk }}"
          type: thin
      customization:
        hostname: "{{ host_prefix }}{{ item.split('.')[-1][-3:] }}"
        domain: "{{ vm_domain }}"
        dns_servers: "{{ vm_dns }}"
      state: poweredon
      wait_for_ip_address: no
    delegate_to: localhost
    with_items: "{{ controller_ips }}"
    register: _create_controllers
    async: 1200
    poll: 0

#######################
# GATEWAY Deployment
#######################

  - name: Clone template {{ template_name }} to the Gateway
    vmware_guest:
      hostname: "{{ vcenter_server }}"
      username: "{{ vcenter_user }}"
      password: "{{ vcenter_password }}"
      validate_certs: no
      name: "{{ item }}-ECP-GATEWAY-{{ vm_prefix }}{{ item.split('.')[-1][-3:] }}"
      template: "{{ template_name }}"
      datacenter: "{{ datacenter_name }}"
      folder: "{{vcenter_folder}}"
      cluster: "{{ cluster_name }}"
      datastore: "{{ vcenter_datastore }}"
      hardware:
        memory_mb: "{{ vm_gateway_memory }}"
        num_cpus: "{{ vm_gateway_cpu_cores }}"
      networks:
      - name: "{{ vcenter_vswitch }}"
        ip: "{{ item }}"
        netmask: "{{ vm_network | ansible.utils.ipaddr('netmask') }}"
        gateway: "{{ vm_gateway }}"
        type: static
        dns_servers: "{{ vm_dns }}"
      disk:
        - autoselect_datastore: no
          datastore: "{{ vcenter_datastore }}"
          size_gb: 400
          type: thin
      customization:
        hostname: "{{ host_prefix }}{{ item.split('.')[-1][-3:] }}"
        domain: "{{ vm_domain }}"
        dns_servers: "{{ vm_dns }}"
      state: poweredon
      wait_for_ip_address: no
    delegate_to: localhost
    with_items: "{{ gateway_ips }}"
    register: _create_gateways
    async: 1200
    poll: 0

#######################
# ADSERVER Deployment
#######################

  - name: Clone template {{ template_name }} to the ADServer
    vmware_guest:
      hostname: "{{ vcenter_server }}"
      username: "{{ vcenter_user }}"
      password: "{{ vcenter_password }}"
      validate_certs: no
      name: "{{ item }}-ECP-ADSERVER-{{ vm_prefix }}{{ item.split('.')[-1][-3:] }}"
      template: "{{ template_name }}"
      datacenter: "{{ datacenter_name }}"
      folder: "{{vcenter_folder}}"
      cluster: "{{ cluster_name }}"
      datastore: "{{ vcenter_datastore }}"
      hardware:
        memory_mb: "{{ vm_adserver_memory }}"
        num_cpus: "{{ vm_adserver_cpu_cores }}"
      networks:
      - name: "{{ vcenter_vswitch }}"
        ip: "{{ item }}"
        netmask: "{{ vm_network | ansible.utils.ipaddr('netmask') }}"
        gateway: "{{ vm_gateway }}"
        type: static
        dns_servers: "{{ vm_dns }}"
      disk:
        - autoselect_datastore: no
          datastore: "{{ vcenter_datastore }}"
          size_gb: 400
          type: thin
      customization:
        hostname: "{{ host_prefix }}{{ item.split('.')[-1][-3:] }}"
        domain: "{{ vm_domain }}"
        dns_servers: "{{ vm_dns }}"
      state: poweredon
      wait_for_ip_address: no
    delegate_to: localhost
    with_items: "{{ ad_server_ips }}"
    register: _create_adserver
    async: 1200
    poll: 0
    when: install_ad | bool

#######################
# PICASSO Deployment
#######################

  - name: Clone template {{ template_name }} to the PICASSO
    vmware_guest:
      hostname: "{{ vcenter_server }}"
      username: "{{ vcenter_user }}"
      password: "{{ vcenter_password }}"
      validate_certs: no
      name: "{{ item }}-ECP-K8S-PICASSO-{{ vm_prefix }}{{ item.split('.')[-1][-3:] }}"
      template: "{{ template_name }}"
      datacenter: "{{ datacenter_name }}"
      folder: "{{vcenter_folder}}"
      cluster: "{{ cluster_name }}"
      datastore: "{{ vcenter_datastore }}"
      hardware:
        memory_mb: "{{ vm_picasso_memory }}"
        num_cpus: "{{ vm_picasso_cpu_cores }}"
      networks:
      - name: "{{ vcenter_vswitch }}"
        ip: "{{ item }}"
        netmask: "{{ vm_network | ansible.utils.ipaddr('netmask') }}"
        gateway: "{{ vm_gateway }}"
        type: static
        dns_servers: "{{ vm_dns }}"
      disk:
        - autoselect_datastore: no
          datastore: "{{ vcenter_datastore }}"
          size_gb: 400
          type: thin
        - autoselect_datastore: no
          datastore: "{{ vcenter_datastore }}"
          size_gb: "{{ vm_picasso_disk }}"
          type: thin
        - autoselect_datastore: no
          datastore: "{{ vcenter_datastore }}"
          size_gb: "{{ vm_picasso_disk }}"
          type: thin
      customization:
        hostname: "{{ host_prefix }}{{ item.split('.')[-1][-3:] }}"
        domain: "{{ vm_domain }}"
        dns_servers: "{{ vm_dns }}"
      state: poweredon
      wait_for_ip_address: no
    delegate_to: localhost
    with_items: "{{ picasso_ips }}"
    register: _create_picasso_nodes
    async: 1200
    poll: 0

#######################
# K8S Deployment
#######################

  - name: Clone template {{ template_name }} to the k8s
    vmware_guest:
      hostname: "{{ vcenter_server }}"
      username: "{{ vcenter_user }}"
      password: "{{ vcenter_password }}"
      validate_certs: no
      name: "{{ item }}-ECP-K8S-{{ vm_prefix }}{{ item.split('.')[-1][-3:] }}"
      template: "{{ template_name }}"
      datacenter: "{{ datacenter_name }}"
      folder: "{{vcenter_folder}}"
      cluster: "{{ cluster_name }}"
      datastore: "{{ vcenter_datastore }}"
      hardware:
        memory_mb: "{{ vm_k8s_memory }}"
        num_cpus: "{{ vm_k8s_cpu_cores }}"
      networks:
      - name: "{{ vcenter_vswitch }}"
        ip: "{{ item }}"
        netmask: "{{ vm_network | ansible.utils.ipaddr('netmask') }}"
        gateway: "{{ vm_gateway }}"
        type: static
        dns_servers: "{{ vm_dns }}"
      disk:
        - autoselect_datastore: no
          datastore: "{{ vcenter_datastore }}"
          size_gb: 400
          type: thin
        - autoselect_datastore: no
          datastore: "{{ vcenter_datastore }}"
          size_gb: "{{ vm_k8s_disk }}"
          type: thin
        - autoselect_datastore: no
          datastore: "{{ vcenter_datastore }}"
          size_gb: "{{ vm_k8s_disk }}"
          type: thin
      customization:
        hostname: "{{ host_prefix }}{{ item.split('.')[-1][-3:] }}"
        domain: "{{ vm_domain }}"
        dns_servers: "{{ vm_dns }}"
      state: poweredon
      wait_for_ip_address: no
    delegate_to: localhost
    with_items: "{{ k8s_ips }}"
    register: _create_k8s_nodes
    async: 1200
    poll: 0

#######################
# Standalone Data Fabric Deployment
#######################

  - name: Clone template {{ mapr_template_name }} to the mapr
    vmware_guest:
      hostname: "{{ vcenter_server }}"
      username: "{{ vcenter_user }}"
      password: "{{ vcenter_password }}"
      validate_certs: no
      name: "{{ item }}-EDF-{{ vm_prefix }}{{ item.split('.')[-1][-3:] }}"
      template: "{{ mapr_template_name }}"
      datacenter: "{{ datacenter_name }}"
      folder: "{{vcenter_folder}}"
      cluster: "{{ cluster_name }}"
      datastore: "{{ vcenter_datastore }}"
      hardware:
        memory_mb: "{{ vm_mapr_memory }}"
        num_cpus: "{{ vm_mapr_cpu_cores }}"
      networks:
      - name: "{{ vcenter_vswitch }}"
        ip: "{{ item }}"
        netmask: "{{ vm_network | ansible.utils.ipaddr('netmask') }}"
        gateway: "{{ vm_gateway }}"
        type: static
        dns_servers: "{{ vm_dns }}"
      disk:
        - autoselect_datastore: no
          datastore: "{{ vcenter_datastore }}"
          size_gb: 400
          type: thin
        - autoselect_datastore: no
          datastore: "{{ vcenter_datastore }}"
          size_gb: "{{ vm_mapr_disk }}"
          type: thin
      customization:
        hostname: "{{ host_prefix }}{{ item.split('.')[-1][-3:] }}"
        domain: "{{ vm_domain }}"
        dns_servers: "{{ vm_dns }}"
      state: poweredon
      wait_for_ip_address: no
    delegate_to: localhost
    with_items: "{{ mapr_ips }}"
    register: _create_mapr_nodes
    async: 1200
    poll: 0

  - name: Wait for creation to finish
    async_status:
      jid: "{{ item.ansible_job_id }}"
    register: _jobs
    until: _jobs.finished
    delay: 15  # Check every 15 seconds
    retries: 20  # Retry up to 20 times - 300 seconds
    with_items: "{{ _create_controllers.results + _create_gateways.results + _create_k8s_nodes.results + _create_picasso_nodes.results + _create_mapr_nodes.results }}"

- hosts: all
  gather_facts: no
  tasks:
  - name: Wait 600 seconds for target connection to become reachable/usable
    wait_for_connection:
  - name: disable cloud-init network config
    copy:
      dest: /etc/cloud/cloud.cfg.d/99-custom-networking.cfg
      content: 'network: {config: disabled}'
    become: yes

######################################################################################################
# VMWARE DEPLOYMENT END
######################################################################################################
