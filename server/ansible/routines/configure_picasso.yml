### Configure Picasso
- hosts: "{{ (groups['controllers'] | first) | default([])}}"
  tasks:
    - name: read cluster id
      shell: "hpecp k8scluster list -o text | cut -d' ' -f1"
      register: cluster_id

    - name: get cluster
      shell: "hpecp k8scluster get {{ cluster_id.stdout }} -o json"
      register: cluster_json
      ignore_errors: True

    - set_fact:
        cluster: "{{ cluster_json.stdout | from_json }}"
    - set_fact:
        firstmaster_id: "{{ (cluster | json_query(jmesquery)) | first }}"
      vars:
        jmesquery: "k8shosts_config[?role=='master'].node"

    - shell: "hpecp k8sworker get {{ firstmaster_id }} -o json"
      register: firstmaster_json
    - set_fact:
        firstmasterip: "{{ (firstmaster_json.stdout | from_json) | json_query('ipaddr') }}"

    - name: prepare tenants
      shell: |-
        function retry {
          local n=1
          local max=20
          local delay=30
          while true; do
            "$@" && break || {
              if [[ $n -lt $max ]]; then
                ((n++))
                echo "Command failed. Attempt $n/$max:"
                sleep $delay;
              else
                fail "The command has failed after $n attempts."
              fi
          }
          done
        }
        export SCRIPTPATH="/opt/bluedata/bundles/hpe-cp*"
        export MASTER_NODE_IP={{ firstmasterip }}
        export LOG_FILE_PATH=/tmp/register_k8s_prepare.log
        retry ${SCRIPTPATH}/startscript.sh --action prepare_dftenants
        export LOG_FILE_PATH=/tmp/register_k8s_configure.log
        [[ $(tail -1 ${LOG_FILE_PATH} 2> /dev/null ) == "The action configure_dftenants completed successfully." ]] || echo yes | ${SCRIPTPATH}/startscript.sh --action configure_dftenants
        export LOG_FILE_PATH=/tmp/register_k8s_register.log
        [[ $(tail -1 ${LOG_FILE_PATH} 2> /dev/null ) == "The action register_dftenants completed successfully." ]] || expect <<EOF
          set timeout 1800
          spawn $(realpath ${SCRIPTPATH})/startscript.sh --action register_dftenants
          expect ".*Enter Site Admin username: " { send "admin\r" }
          expect "admin\r\nEnter Site Admin password: " { send "{{ admin_password }}\r" }
          expect eof
        EOF
      register: result
      # retries: 15
      # delay: 60
      # until: result is not failed


- name: configure picasso DF users
  hosts: localhost
  vars:
    kubectl_dfdemo: "kubectl --kubeconfig {{ ansible_env.HOME }}/.kube/config -n dfdemo "
  tasks:

    - name: mapr password
      shell: "{{ kubectl_dfdemo }} get secret system -o yaml | grep MAPR_PASSWORD | head -1 | awk '{print $2}' | base64 --decode"
      register: mapr_password

    - name: maprlogin
      shell: "{{ kubectl_dfdemo }} exec admincli-0 -- bash -c 'echo {{ mapr_password.stdout }} | maprlogin password'"

    - name: add ad_admin1
      shell: "{{ kubectl_dfdemo }} exec admincli-0 -- maprcli acl edit -type cluster -user ad_admin1:fc"

    - name: add ad_user1
      shell: "{{ kubectl_dfdemo }} exec admincli-0 -- maprcli acl edit -type cluster -user ad_user1:login"



- name: configure picasso MCS TLS
  hosts: localhost
  vars:
    kubectl_dfdemo: "kubectl --kubeconfig {{ ansible_env.HOME }}/.kube/config -n dfdemo "
    kubeexec_dfdemo: "kubectl --kubeconfig {{ ansible_env.HOME }}/.kube/config -n dfdemo exec admincli-0 -- "
  tasks:

    - name: Collect current timestamp
      shell: "echo /tmp/ansible-tls-$(date +%d%b%y_%H-%M-%S)"
      register: work_folder

    - name: Create folder
      shell: "{{ kubeexec_dfdemo }} mkdir {{ work_folder.stdout }}"

    - name: copy ca cert
      shell: "{{ kubectl_dfdemo }} cp ../../generated/minica.pem admincli-0:{{ work_folder.stdout }}"

    - name: copy ca key
      shell: "{{ kubectl_dfdemo }} cp ../../generated/minica-key.pem admincli-0:{{ work_folder.stdout }}"

    - name: gencsr, create cert and import
      shell: >
          {{ kubeexec_dfdemo }} bash -c "
            cd {{ work_folder.stdout }}
            cp /opt/mapr/kubernetes/template.cnf my.cnf
            printf '\nDNS.4 = {{ gateway_pub_dns }}\n' >> my.cnf
            sed -i -r 's/\{service\}/mcs-svc/g' my.cnf
            sed -i -r 's/\{namespace\}/dfdemo/g' my.cnf
            sed -i -r 's/\{private-key-subject-cn\}/*.maprwebserver-svc.mycluster.svc.cluster.local/g'
            edftool gen-csrs -t my.cnf -y
            openssl x509 -req -in dfdemo-mcs-svc.csr -CA minica.pem -CAkey minica-key.pem -CAcreateserial -out dfdemo-mcs-svc.crt -days 500 -sha256 -extensions 'v3_req' -extfile <(cat my.cnf)
            edftool import-certs -y
            # yes Y | edf update cluster # not required if only updating mcs?
            "
    - name: restart pod
      shell: "{{ kubectl_dfdemo }} delete pod mcs-0"
