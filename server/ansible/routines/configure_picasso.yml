### Configure Picasso
- hosts: "{{ groups['controllers'] | first }}"
  tasks:
    - name: read cluster id
      shell: "hpecp k8scluster list -o text | cut -d' ' -f1"
      register: cluster_id

    - name: get cluster
      shell: "hpecp k8scluster get {{ cluster_id.stdout }} -o json"
      register: cluster_json
      ignore_errors: True

    - set_fact:
        cluster: "{{ cluster_json.stdout | from_json }}"
    - set_fact:
        firstmaster_id: "{{ (cluster | json_query(jmesquery)) | first }}"
      vars:
        jmesquery: "k8shosts_config[?role=='master'].node"

    - shell: "hpecp k8sworker get {{ firstmaster_id }} -o json"
      register: firstmaster_json
    - set_fact:
        firstmasterip: "{{ (firstmaster_json.stdout | from_json) | json_query('ipaddr') }}"

    - name: prepare tenants
      shell: |-
        function retry {
          local n=1
          local max=20
          local delay=30
          while true; do
            "$@" && break || {
              if [[ $n -lt $max ]]; then
                ((n++))
                echo "Command failed. Attempt $n/$max:"
                sleep $delay;
              else
                fail "The command has failed after $n attempts."
              fi
          }
          done
        }
        export SCRIPTPATH="/opt/bluedata/bundles/hpe-cp*"
        export MASTER_NODE_IP={{ firstmasterip }}
        export LOG_FILE_PATH=/tmp/register_k8s_prepare.log
        retry ${SCRIPTPATH}/startscript.sh --action prepare_dftenants
        export LOG_FILE_PATH=/tmp/register_k8s_configure.log
        [[ $(tail -1 ${LOG_FILE_PATH}) == "The action configure_dftenants completed successfully." ]] || echo yes | ${SCRIPTPATH}/startscript.sh --action configure_dftenants
        export LOG_FILE_PATH=/tmp/register_k8s_register.log
        expect <<EOF
          set timeout 1800
          spawn $(realpath ${SCRIPTPATH}/startscript.sh) --action register_dftenants
          expect ".*Enter Site Admin username: " { send "admin\r" }
          expect "admin\r\nEnter Site Admin password: " { send "{{ admin_password }}\r" }
          expect eof
        EOF
      register: result
      # retries: 15
      # delay: 60
      # until: result is not failed
