- name: wait for notebook
#   export CLUSTER_ID=\$(hpecp tenant list --query "[?_links.self.href == '$TENANT_ID'] | [0] | [_links.k8scluster]" --output text)
#   export TENANT_NS=\$(hpecp tenant list --query "[?_links.self.href == '$TENANT_ID'] | [0] | [namespace]" --output text)
  
#   echo Waiting for Notebook to have state==configured
#   COUNTER=0
#   while [ \$COUNTER -lt 30 ]; 
#   do
#     STATE=\$(kubectl --kubeconfig <(hpecp k8scluster --id \$CLUSTER_ID admin-kube-config) \
#                 get kubedirectorcluster -n \$TENANT_NS $MLFLOW_CLUSTER_NAME -o 'jsonpath={.status.state}')
#     echo STATE=\$STATE
#     [[ \$STATE == "configured" ]] && break
#     sleep 1m
#     let COUNTER=COUNTER+1 
#   done
  
#    HOST_AND_PORT=\$(kubectl --kubeconfig <(hpecp k8scluster --id \$CLUSTER_ID admin-kube-config) \
#     get service -l kubedirector.hpe.com/kdcluster=$MLFLOW_CLUSTER_NAME -n \$TENANT_NS \
#     -o jsonpath={.items[0].metadata.annotations.'hpecp-internal-gateway/9000'})
    
#   echo \$HOST_AND_PORT


#     export PYTHONPATH=\$PYTHONPATH:~/.local/lib/python3.6/site-packages/
#     export PYTHONWARNINGS="ignore:Unverified HTTPS request"
    
#     pip3 install minio --user --quiet
#     pip3 install requests --user --quiet
#     python3 - <<PYTHON_EOF
# from minio import Minio
# from minio.error import S3Error
# import urllib3
# import sys
# httpClient = urllib3.PoolManager(cert_reqs = 'CERT_NONE')
# client = Minio(
#     "$HOST",
#     access_key="admin",
#     secret_key="admin123",
#     secure=True,
#     http_client = httpClient
# )
# found = client.bucket_exists("mlflow")
# if not found:
#     client.make_bucket("mlflow")
#     print("Created bucket 'mflow'")
# else:
#     print("Bucket 'mlflow' already exists")
# PYTHON_EOF
