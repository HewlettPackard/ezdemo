pipeline {
    agent any
    options {
        skipStagesAfterUnstable()
    }
    stages {
            // Stage to clone repository to our workspace.
            stage('Clone repository'){
            steps {
            checkout scm
            }
            }
            // Stage to parameterize the pipeline and generate user.settings/<cloud>_config.json for the pipeline.
            stage('EZDEMO :: Configure Input Parameters'){
            steps {
                script {
                    properties([
                            parameters([
                                choice(
                                choices: ['aws', 'azure','gcp'], 
                                name: 'CloudEnv'        
                                ),
                                [$class: 'CascadeChoiceParameter', 
                                    choiceType: 'PT_SINGLE_SELECT', 
                                    description: 'Regions for Public Cloud Selected',
                                    name: 'regions', 
                                    referencedParameters: 'CloudEnv', 
                                    script: 
                                        [
                                        $class: 'GroovyScript', 
                                        fallbackScript: [
                                                classpath: [], 
                                                sandbox: false, 
                                                script: "return['Could not get demo_dependent Param']"
                                                ], 
                                        script: [ 
                                                sandbox: false, 
                                                script: ('''
                                                if (CloudEnv.equals("aws")){
                                                    return["us-east-1","us-east-2","us-west-1","us-west-2","ap-southeast-1","eu-central-1","eu-west-1","eu-west-2","eu-west-3","eu-north-1","ca-central-1"]
                                                }
                                                else if(CloudEnv.equals("azure")){
                                                    return["eastus","eastus2","centralus","westus","westus2","canadacentral","canadaeast","northeurope","westeurope","ukwest","uksouth","francecentral","germanynorth","centralindia","japaneast","australiacentral","uaenorth","southafricawest"]
                                                }
                                                else if(CloudEnv.equals("gcp")){
                                                    return["TBD1", "TBD2", "TBD3"]
                                                }
                                                ''',false,[])
                                                ]    
                                        ]
                                ],
                                string(
                                defaultValue: 'ezcp_jenkins', 
                                name: 'ProjectId', 
                                trim: true
                                ),
                                string(
                                defaultValue: 'admin', 
                                name: 'ecp_user', 
                                trim: true
                                ),
                                string(
                                defaultValue: 'admin123', 
                                name: 'ecp_password', 
                                trim: true
                                ),
                                booleanParam(
                                defaultValue: true, 
                                description: '', 
                                name: 'is_mlops'
                                ),
                                booleanParam(
                                defaultValue: true, 
                                description: '', 
                                name: 'is_mapr'
                                ),
                                booleanParam(
                                defaultValue: true, 
                                description: '', 
                                name: 'is_gpu'
                                ),
                                booleanParam(
                                defaultValue: true, 
                                description: '', 
                                name: 'is_ha'
                                ),
                                booleanParam(
                                defaultValue: true, 
                                description: '', 
                                name: 'is_runtime'
                                ),
                                booleanParam(
                                defaultValue: true, 
                                description: '', 
                                name: 'is_verbose'
                                ),
                                booleanParam(
                                defaultValue: true, 
                                description: '', 
                                name: 'install_ad'
                                ),
                                choice(
                                choices: ['ezmeral_platform', 'ezmeral_mlops', 'ezmeral_spark', 'ezmeral_it', 'mapr'], 
                                name: 'CostCenter'        
                                ),
                                choice(
                                choices: ['America/New_York', 'Asia/Calcutta', 'TBD..'], 
                                name: 'TimeZone'        
                                ),
                                booleanParam(
                                defaultValue: true, 
                                description: 'When you want automatic stoppage of resources on given date/time.', 
                                name: 'AutomaticStop'
                                )
                            ])
                        ])
                    }
                // Generate user.settings    
                script {
                    â€‹def tags = [   
                                cost_center : params.CostCenter,
                                TZ : params.TimeZone,
                                stop_auto : params.AutomaticStop
                                ]
                    def extra_tags = groovy.json.JsonOutput.toJson(tags)
                    println(extra_tags)
                    env.CloudType = params.Env
                    def user_setting = [
                        project_id : params.ProjectId,
                        user : params.ecp_user,
                        admin_password : params.ecp_password,
                        is_mlops : params.is_mlops,
                        is_mapr : params.is_mapr,
                        is_gpu : params.is_gpu,
                        is_ha : params.is_ha,
                        is_runtime : params.is_runtime,
                        is_verbose : params.is_verbose,
                        install_ad : params.install_ad,
                        extra_tags : params.extra_tags
                    ]
                    writeJSON(file: 'user.settings', json: user_setting)
                }
                

            }
        }

    // Stage to Create Docker Image.

    stage('EZDEMO :: Build Image'){
    steps {
    script {
            sh  """
                chmod + docker-build.sh
                ./docker-build.sh
                """
            }        
    }
    }
     // Stage to Start the Docker Container.

    stage('EZDEMO :: Run Container'){
    steps {
        script {
            sh  """
                ./start.sh
                ./docker-exec.sh
                """
            }        
        }
    }
     
     // Stage to Build and Deploy EZCP; pass the CloudType from env variable.
    stage('EZCP :: Build and Deploy'){
    steps {
        script {
            sh  "./00-run_all.sh \${CloudType}" 
            }        
        }
    }
}
}