pipeline {
    agent any
    options {
        // skipStagesAfterUnstable()
        skipDefaultCheckout() 
    }
    environment {
        docker_image='erdincka/ezdemo:latest'
        docker_args="-u root:root -v ${WORKSPACE}/aws_config.json:/app/server/aws/config.json -v ${WORKSPACE}/user.settings:/app/server/user.settings"
        aws_credentials = "ezdemo_indu"
        azure_credentials = ""
        gcp_credentials = ""
    }
    stages {
            // Stage to clone repository to our workspace.
            stage('EZDEMO :: Git Clone'){
                steps {
                        checkout scm
                }
            }
            // Stage to parameterize the pipeline and generate user.settings/<cloud>_config.json for the pipeline.
            stage('EZDEMO :: Configure Parameters'){
            steps {
                        parameters(
                            [
                                choice(
                                choices: ['aws', 'azure','gcp'], 
                                description: 'Select the Cloud Provider',
                                name: 'CloudEnv'        
                                ),
                                choice(
                                choices: ["us-east-1","us-east-2","us-west-1","us-west-2","ap-southeast-1","eu-central-1","eu-west-1","eu-west-2","eu-west-3","eu-north-1","ca-central-1"], 
                                description: 'Select the AWS region to use.',
                                name: 'AwsRegions',
                                defaultValue: 'us-east-1'     
                                ),
                                credentials(
                                    credentialType: 'com.cloudbees.jenkins.plugins.awscredentials.AWSCredentialsImpl',
                                    defaultValue: aws_credentials,
                                    name: 'AwsPrincipal',
                                    required: true
                                ),
                                string(
                                defaultValue: 'ezcp_jenkins', 
                                name: 'ProjectId', 
                                trim: true
                                ),
                                string(
                                defaultValue: 'admin', 
                                name: 'ecp_user', 
                                trim: true
                                ),
                                string(
                                defaultValue: 'admin123', 
                                name: 'ecp_password', 
                                trim: true
                                ),
                                booleanParam(
                                defaultValue: true, 
                                description: '', 
                                name: 'is_mlops'
                                ),
                                booleanParam(
                                defaultValue: true, 
                                description: '', 
                                name: 'is_mapr'
                                ),
                                booleanParam(
                                defaultValue: true, 
                                description: '', 
                                name: 'is_gpu'
                                ),
                                booleanParam(
                                defaultValue: true, 
                                description: '', 
                                name: 'is_ha'
                                ),
                                booleanParam(
                                defaultValue: true, 
                                description: '', 
                                name: 'is_runtime'
                                ),
                                booleanParam(
                                defaultValue: true, 
                                description: '', 
                                name: 'is_verbose'
                                ),
                                booleanParam(
                                defaultValue: true, 
                                description: '', 
                                name: 'install_ad'
                                ),
                                choice(
                                choices: ['ezmeral_platform', 'ezmeral_mlops', 'ezmeral_spark', 'ezmeral_it', 'mapr'], 
                                name: 'CostCenter'        
                                ),
                                choice(
                                choices: ['America/New_York', 'Asia/Calcutta', 'TBD..'], 
                                name: 'TimeZone'        
                                ),
                                booleanParam(
                                defaultValue: true, 
                                description: 'If true, all cloud resources will be stopped', 
                                name: 'IsAutomaticStop'
                                ),
                                [
                                    $class: 'DateParameterDefinition',
                                    name: 'stop_date',
                                    description: 'When you want to stop resources. Format:yyyy:MM:dd hh:mm. By default it will stop after a day',
                                    dateFormat: 'yyyy:MM:dd hh:mm',
                                    defaultValue: 'LocalDate.now().plusDays(1)'
                                ],
                                [
                                    $class: 'DateParameterDefinition',
                                    name: 'delete_date',
                                    description: 'When you want to stop resources. Format:yyyy:MM:dd hh:mm. By default it will delete after 3 days',
                                    dateFormat: 'yyyy:MM:dd hh:mm',
                                    defaultValue: 'LocalDate.now().plusDays(3)'
                                ]
                            ]
                        )

            }
        }
    // Generate user.settings 
    stage('EZDEMO :: Generate user.settings'){
        steps {
                script {
                        def tags = [   
                                cost_center : params.CostCenter,
                                TZ : params.TimeZone,
                                stop_auto : params.IsAutomaticStop,
                                stop_date : params.stop_date,
                                delete_date: params.delete_date
                                ]
                        def extra_tags_a = groovy.json.JsonOutput.toJson(tags) 
                        env.CloudType = params.CloudEnv 
                        def user_setting = [
                            project_id : params.ProjectId,
                            user : params.ecp_user,
                            admin_password : params.ecp_password,
                            is_mlops : params.is_mlops,
                            is_mapr : params.is_mapr,
                            is_gpu : params.is_gpu,
                            is_ha : params.is_ha,
                            is_runtime : params.is_runtime,
                            is_verbose : params.is_verbose,
                            install_ad : params.install_ad,
                            extra_tags : extra_tags_a
                        ]

                        writeJSON(file: "$WORKSPACE/user.settings", json: user_setting)
                    }
        }
    }
    // Stage to generate aws_config.json
    stage('EZDEMO :: Generate aws_config.json'){
        steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: params.AwsPrincipal, variable: 'AWS_ACCESS_KEY_ID']]) {
                        sh ">${WORKSPACE}/aws_config.json"
                        sh "echo aws_access_key=${env.AWS_ACCESS_KEY_ID} >> ${WORKSPACE}/aws_config.json" 
                        sh "echo aws_secret_key=${env.AWS_SECRET_ACCESS_KEY} >> ${WORKSPACE}/aws_config.json"
                        sh "echo region=${params.AwsRegions} >> ${WORKSPACE}/aws_config.json"
                    }
                }
        }
    }
    stage('EZDEMO :: Stop Running Containers'){
        steps{
            script{
                def containers_running = sh(returnStdout: true, script: 'docker container ps -aq').replaceAll("\n", " ") 
                if (containers_running) {
                    sh "docker stop ${containers_running}"
                    sh "docker rm ezdemo"
                }
                    
            }
        }
    }
    //Stage to Start the Docker Container.
    stage('EZDEMO :: Run Container'){
        steps {
            sh './start.sh '  
        }        
    }
    // Stage to Build and Deploy EZCP Against ENV selected.
    stage('EZCP :: Build and Deploy'){
        steps {  
            script { 
                def running_container=sh(script:'$(docker ps -f "status=running" -f "ancestor=erdincka/ezdemo" -q)')
                sh 'docker exec ${running_container} ./00-run_all.sh ${CloudType}'   
            } 
        }
    }
}
}
post {
    always {
            script {
                echo 'Job is completed, doing clean up activities!'
                // deleteDir() /* clean up workspace too */
                def containers_running = sh(returnStdout: true, script: 'docker container ps -aq').replaceAll("\n", " ") 
                if (containers_running) {
                    sh "docker stop ${containers_running}"
                sh "timeout 30 docker ps -aq | xargs -r docker rm -f || true"
                }
            }
    }
    success {
        echo 'Job is completed successfully!'
    }
    unstable {
        echo 'Job is Unstable :/'
    }
    failure {
            echo 'Job is Failed! :('
            mail to: 'indu.sharma@hpe.com',
             subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
             body: "Something is wrong with: ${env.BUILD_URL}, Thanks - Indu Sharma"
    }
}
